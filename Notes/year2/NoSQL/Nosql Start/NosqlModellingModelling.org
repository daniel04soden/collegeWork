* NoSQL Modelling
:PROPERTIES:
:CUSTOM_ID: nosql-modelling
:END:
* Why go from rdbms to nosql
:PROPERTIES:
:CUSTOM_ID: why-go-from-rdbms-to-nosql
:END:
1. Easier to scale
2. Better performance
3. 40x lower cost
4. Greater agility
5. Cross platform

* How to get started
:PROPERTIES:
:CUSTOM_ID: how-to-get-started
:END:
1. Identify right application
2. Model data
3. Access your data
4. Migrate your data

** Identifying the right application
:PROPERTIES:
:CUSTOM_ID: identifying-the-right-application
:END:
- Have one or more requirements:
  - Send and receive JSON
  - Store tbs of data
  - Be available 24/7
  - Read and write to multiple data centers

* Strategies and best practices
:PROPERTIES:
:CUSTOM_ID: strategies-and-best-practices
:END:
- if one to one store as nested objects
- Many to one or many to many - different documents
- Data reads are mostly parent fields - different documents

** Atomicity and NoSQl
:PROPERTIES:
:CUSTOM_ID: atomicity-and-nosql
:END:
- NoSQL doesnt support atomicity that spans multiple aggregates
- This means that if we need to update multiple aggregates we have to
  manage that in the app code
