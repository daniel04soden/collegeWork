* JavaDocs
:PROPERTIES:
:CUSTOM_ID: javadocs
:END:
- Java doc is the automatic documentation creation tool for Java
- Used for genrating jva code docs in html from source code which
  requires docs in a predefined format ## Generate a javadoc
- Eclipse/Intellij
  - On the top menu select tools generate javadoc
  - Need to have comments for each method and class
  - HTML tags can also be used given its just html markup
- [cite/t:@depracted] - good tag to say a method may not be relevant
  anymore
- [cite/t:@version] - which version is it referring to

** Is it useful?
:PROPERTIES:
:CUSTOM_ID: is-it-useful
:END:
- If done properly
- bad:
  - What the code does
- Good:
  - Why does the codes it

** Why is it not there?
:PROPERTIES:
:CUSTOM_ID: why-is-it-not-there
:END:
- Expensive time consuming

- Written by people who can't write or who don't know the material

- Assumes knowledge readers don't have

- Outdated ## Documentation outside of the code

- What software does?

- How it does it?

- Descriptions of methods and classes.

- When we don't have access to the library code

- Cloud tools

- Before we use any software

  - To check if it fits our purpose

** Documentation inside of the code
:PROPERTIES:
:CUSTOM_ID: documentation-inside-of-the-code
:END:
- For us and other devs to help understand the code
  - Direct documentation = comments
  - Indirect documentation = names of variables, methods

* Database integration
:PROPERTIES:
:CUSTOM_ID: database-integration
:END:
- Java Database connector - JDBC
- Driver manager: Loads db drivers and manages connections between the
  application and the driver

1. Connection
2. Statement
3. Result set

- For try catch block for any other issues, we use the finally keyword
  as well

** Better try catch blocks
:PROPERTIES:
:CUSTOM_ID: better-try-catch-blocks
:END:
- try
  - catch
  - finally
    - try
    - catch
