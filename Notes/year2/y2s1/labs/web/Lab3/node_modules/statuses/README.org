* statuses
:PROPERTIES:
:CUSTOM_ID: statuses
:END:
[[https://npmjs.org/package/statuses][[[https://badgen.net/npm/v/statuses]]]]
[[https://npmjs.org/package/statuses][[[https://badgen.net/npm/dm/statuses]]]]
[[https://nodejs.org/en/download][[[https://badgen.net/npm/node/statuses]]]]
[[https://github.com/jshttp/statuses/actions?query=workflow%3Aci][[[https://badgen.net/github/checks/jshttp/statuses/master?label=ci]]]]
[[https://coveralls.io/r/jshttp/statuses?branch=master][[[https://badgen.net/coveralls/c/github/jshttp/statuses/master]]]]

HTTP status utility for node.

This module provides a list of status codes and messages sourced from a
few different projects:

- The
  [[https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml][IANA
  Status Code Registry]]
- The [[https://nodejs.org/][Node.js project]]
- The [[https://www.nginx.com/][NGINX project]]
- The [[https://httpd.apache.org/][Apache HTTP Server project]]

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_src sh
$ npm install statuses
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:

#+begin_html
  <!-- eslint-disable no-unused-vars -->
#+end_html

#+begin_src js
var status = require('statuses')
#+end_src

*** status(code)
:PROPERTIES:
:CUSTOM_ID: statuscode
:END:
Returns the status message string for a known HTTP status code. The code
may be a number or a string. An error is thrown for an unknown status
code.

#+begin_html
  <!-- eslint-disable no-undef -->
#+end_html

#+begin_src js
status(403) // => 'Forbidden'
status('403') // => 'Forbidden'
status(306) // throws
#+end_src

*** status(msg)
:PROPERTIES:
:CUSTOM_ID: statusmsg
:END:
Returns the numeric status code for a known HTTP status message. The
message is case-insensitive. An error is thrown for an unknown status
message.

#+begin_html
  <!-- eslint-disable no-undef -->
#+end_html

#+begin_src js
status('forbidden') // => 403
status('Forbidden') // => 403
status('foo') // throws
#+end_src

*** status.codes
:PROPERTIES:
:CUSTOM_ID: status.codes
:END:
Returns an array of all the status codes as =Integer=s.

*** status.code[msg]
:PROPERTIES:
:CUSTOM_ID: status.codemsg
:END:
Returns the numeric status code for a known status message (in
lower-case), otherwise =undefined=.

#+begin_html
  <!-- eslint-disable no-undef, no-unused-expressions -->
#+end_html

#+begin_src js
status['not found'] // => 404
#+end_src

*** status.empty[code]
:PROPERTIES:
:CUSTOM_ID: status.emptycode
:END:
Returns =true= if a status code expects an empty body.

#+begin_html
  <!-- eslint-disable no-undef, no-unused-expressions -->
#+end_html

#+begin_src js
status.empty[200] // => undefined
status.empty[204] // => true
status.empty[304] // => true
#+end_src

*** status.message[code]
:PROPERTIES:
:CUSTOM_ID: status.messagecode
:END:
Returns the string message for a known numeric status code, otherwise
=undefined=. This object is the same format as the
[[https://nodejs.org/dist/latest/docs/api/http.html#http_http_status_codes][Node.js
http module =http.STATUS_CODES=]].

#+begin_html
  <!-- eslint-disable no-undef, no-unused-expressions -->
#+end_html

#+begin_src js
status.message[404] // => 'Not Found'
#+end_src

*** status.redirect[code]
:PROPERTIES:
:CUSTOM_ID: status.redirectcode
:END:
Returns =true= if a status code is a valid redirect status.

#+begin_html
  <!-- eslint-disable no-undef, no-unused-expressions -->
#+end_html

#+begin_src js
status.redirect[200] // => undefined
status.redirect[301] // => true
#+end_src

*** status.retry[code]
:PROPERTIES:
:CUSTOM_ID: status.retrycode
:END:
Returns =true= if you should retry the rest.

#+begin_html
  <!-- eslint-disable no-undef, no-unused-expressions -->
#+end_html

#+begin_src js
status.retry[501] // => undefined
status.retry[503] // => true
#+end_src

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
