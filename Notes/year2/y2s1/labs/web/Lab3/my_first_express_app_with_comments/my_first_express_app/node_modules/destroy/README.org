* destroy
:PROPERTIES:
:CUSTOM_ID: destroy
:END:
[[https://npmjs.org/package/destroy][[[https://img.shields.io/npm/v/destroy.svg?style=flat-square]]]]
[[https://github.com/stream-utils/destroy/actions/workflows/ci.yml][[[https://img.shields.io/github/workflow/status/stream-utils/destroy/ci/master?label=ci&style=flat-square]]]]
[[https://coveralls.io/r/stream-utils/destroy?branch=master][[[https://img.shields.io/coveralls/stream-utils/destroy.svg?style=flat-square]]]]
[[file:LICENSE.md][[[http://img.shields.io/npm/l/destroy.svg?style=flat-square]]]]
[[https://npmjs.org/package/destroy][[[http://img.shields.io/npm/dm/destroy.svg?style=flat-square]]]]

Destroy a stream.

This module is meant to ensure a stream gets destroyed, handling
different APIs and Node.js bugs.

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
#+begin_src js
var destroy = require('destroy')
#+end_src

*** destroy(stream [, suppress])
:PROPERTIES:
:CUSTOM_ID: destroystream-suppress
:END:
Destroy the given stream, and optionally suppress any future =error=
events.

In most cases, this is identical to a simple =stream.destroy()= call.
The rules are as follows for a given stream:

1. If the =stream= is an instance of =ReadStream=, then call
   =stream.destroy()= and add a listener to the =open= event to call
   =stream.close()= if it is fired. This is for a Node.js bug that will
   leak a file descriptor if =.destroy()= is called before =open=.
2. If the =stream= is an instance of a zlib stream, then call
   =stream.destroy()= and close the underlying zlib handle if open,
   otherwise call =stream.close()=. This is for consistency across
   Node.js versions and a Node.js bug that will leak a native zlib
   handle.
3. If the =stream= is not an instance of =Stream=, then nothing happens.
4. If the =stream= has a =.destroy()= method, then call it.

The function returns the =stream= passed in as the argument.

** Example
:PROPERTIES:
:CUSTOM_ID: example
:END:
#+begin_src js
var destroy = require('destroy')

var fs = require('fs')
var stream = fs.createReadStream('package.json')

// ... and later
destroy(stream)
#+end_src
