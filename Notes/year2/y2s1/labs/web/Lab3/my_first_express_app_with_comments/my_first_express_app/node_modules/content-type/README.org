* content-type
:PROPERTIES:
:CUSTOM_ID: content-type
:END:
[[https://npmjs.org/package/content-type][[[https://badgen.net/npm/v/content-type]]]]
[[https://npmjs.org/package/content-type][[[https://badgen.net/npm/dm/content-type]]]]
[[https://nodejs.org/en/download][[[https://badgen.net/npm/node/content-type]]]]
[[https://github.com/jshttp/content-type/actions/workflows/ci.yml][[[https://badgen.net/github/checks/jshttp/content-type/master?label=ci]]]]
[[https://coveralls.io/r/jshttp/content-type?branch=master][[[https://badgen.net/coveralls/c/github/jshttp/content-type/master]]]]

Create and parse HTTP Content-Type header according to RFC 7231

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
#+begin_src sh
$ npm install content-type
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
#+begin_src js
var contentType = require('content-type')
#+end_src

*** contentType.parse(string)
:PROPERTIES:
:CUSTOM_ID: contenttype.parsestring
:END:
#+begin_src js
var obj = contentType.parse('image/svg+xml; charset=utf-8')
#+end_src

Parse a =Content-Type= header. This will return an object with the
following properties (examples are shown for the string
='image/svg+xml; charset=utf-8'=):

- =type=: The media type (the type and subtype, always lower case).
  Example: ='image/svg+xml'=

- =parameters=: An object of the parameters in the media type (name of
  parameter always lower case). Example: ={charset: 'utf-8'}=

Throws a =TypeError= if the string is missing or invalid.

*** contentType.parse(req)
:PROPERTIES:
:CUSTOM_ID: contenttype.parsereq
:END:
#+begin_src js
var obj = contentType.parse(req)
#+end_src

Parse the =Content-Type= header from the given =req=. Short-cut for
=contentType.parse(req.headers['content-type'])=.

Throws a =TypeError= if the =Content-Type= header is missing or invalid.

*** contentType.parse(res)
:PROPERTIES:
:CUSTOM_ID: contenttype.parseres
:END:
#+begin_src js
var obj = contentType.parse(res)
#+end_src

Parse the =Content-Type= header set on the given =res=. Short-cut for
=contentType.parse(res.getHeader('content-type'))=.

Throws a =TypeError= if the =Content-Type= header is missing or invalid.

*** contentType.format(obj)
:PROPERTIES:
:CUSTOM_ID: contenttype.formatobj
:END:
#+begin_src js
var str = contentType.format({
  type: 'image/svg+xml',
  parameters: { charset: 'utf-8' }
})
#+end_src

Format an object into a =Content-Type= header. This will return a string
of the content type for the given object with the following properties
(examples are shown that produce the string
='image/svg+xml; charset=utf-8'=):

- =type=: The media type (will be lower-cased). Example:
  ='image/svg+xml'=

- =parameters=: An object of the parameters in the media type (name of
  the parameter will be lower-cased). Example: ={charset: 'utf-8'}=

Throws a =TypeError= if the object contains an invalid type or parameter
names.

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
