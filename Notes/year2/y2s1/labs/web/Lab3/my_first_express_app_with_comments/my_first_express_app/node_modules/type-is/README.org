* type-is
:PROPERTIES:
:CUSTOM_ID: type-is
:END:
[[https://npmjs.org/package/type-is][[[https://badgen.net/npm/v/type-is]]]]
[[https://npmjs.org/package/type-is][[[https://badgen.net/npm/dm/type-is]]]]
[[https://nodejs.org/en/download][[[https://badgen.net/npm/node/type-is]]]]
[[https://travis-ci.org/jshttp/type-is][[[https://badgen.net/travis/jshttp/type-is/master]]]]
[[https://coveralls.io/r/jshttp/type-is?branch=master][[[https://badgen.net/coveralls/c/github/jshttp/type-is/master]]]]

Infer the content-type of a request.

*** Install
:PROPERTIES:
:CUSTOM_ID: install
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_src sh
$ npm install type-is
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
#+begin_src js
var http = require('http')
var typeis = require('type-is')

http.createServer(function (req, res) {
  var istext = typeis(req, ['text/*'])
  res.end('you ' + (istext ? 'sent' : 'did not send') + ' me text')
})
#+end_src

*** typeis(request, types)
:PROPERTIES:
:CUSTOM_ID: typeisrequest-types
:END:
Checks if the =request= is one of the =types=. If the request has no
body, even if there is a =Content-Type= header, then =null= is returned.
If the =Content-Type= header is invalid or does not matches any of the
=types=, then =false= is returned. Otherwise, a string of the type that
matched is returned.

The =request= argument is expected to be a Node.js HTTP request. The
=types= argument is an array of type strings.

Each type in the =types= array can be one of the following:

- A file extension name such as =json=. This name will be returned if
  matched.
- A mime type such as =application/json=.
- A mime type with a wildcard such as =*/*= or =*/json= or
  =application/*=. The full mime type will be returned if matched.
- A suffix such as =+json=. This can be combined with a wildcard such as
  =*/vnd+json= or =application/*+json=. The full mime type will be
  returned if matched.

Some examples to illustrate the inputs and returned value:

#+begin_html
  <!-- eslint-disable no-undef -->
#+end_html

#+begin_src js
// req.headers.content-type = 'application/json'

typeis(req, ['json']) // => 'json'
typeis(req, ['html', 'json']) // => 'json'
typeis(req, ['application/*']) // => 'application/json'
typeis(req, ['application/json']) // => 'application/json'

typeis(req, ['html']) // => false
#+end_src

*** typeis.hasBody(request)
:PROPERTIES:
:CUSTOM_ID: typeis.hasbodyrequest
:END:
Returns a Boolean if the given =request= has a body, regardless of the
=Content-Type= header.

Having a body has no relation to how large the body is (it may be 0
bytes). This is similar to how file existence works. If a body does
exist, then this indicates that there is data to read from the Node.js
request stream.

#+begin_html
  <!-- eslint-disable no-undef -->
#+end_html

#+begin_src js
if (typeis.hasBody(req)) {
  // read the body, since there is one

  req.on('data', function (chunk) {
    // ...
  })
}
#+end_src

*** typeis.is(mediaType, types)
:PROPERTIES:
:CUSTOM_ID: typeis.ismediatype-types
:END:
Checks if the =mediaType= is one of the =types=. If the =mediaType= is
invalid or does not matches any of the =types=, then =false= is
returned. Otherwise, a string of the type that matched is returned.

The =mediaType= argument is expected to be a
[[https://tools.ietf.org/html/rfc6838][media type]] string. The =types=
argument is an array of type strings.

Each type in the =types= array can be one of the following:

- A file extension name such as =json=. This name will be returned if
  matched.
- A mime type such as =application/json=.
- A mime type with a wildcard such as =*/*= or =*/json= or
  =application/*=. The full mime type will be returned if matched.
- A suffix such as =+json=. This can be combined with a wildcard such as
  =*/vnd+json= or =application/*+json=. The full mime type will be
  returned if matched.

Some examples to illustrate the inputs and returned value:

#+begin_html
  <!-- eslint-disable no-undef -->
#+end_html

#+begin_src js
var mediaType = 'application/json'

typeis.is(mediaType, ['json']) // => 'json'
typeis.is(mediaType, ['html', 'json']) // => 'json'
typeis.is(mediaType, ['application/*']) // => 'application/json'
typeis.is(mediaType, ['application/json']) // => 'application/json'

typeis.is(mediaType, ['html']) // => false
#+end_src

** Examples
:PROPERTIES:
:CUSTOM_ID: examples
:END:
*** Example body parser
:PROPERTIES:
:CUSTOM_ID: example-body-parser
:END:
#+begin_src js
var express = require('express')
var typeis = require('type-is')

var app = express()

app.use(function bodyParser (req, res, next) {
  if (!typeis.hasBody(req)) {
    return next()
  }

  switch (typeis(req, ['urlencoded', 'json', 'multipart'])) {
    case 'urlencoded':
      // parse urlencoded body
      throw new Error('implement urlencoded body parsing')
    case 'json':
      // parse json body
      throw new Error('implement json body parsing')
    case 'multipart':
      // parse multipart body
      throw new Error('implement multipart body parsing')
    default:
      // 415 error code
      res.statusCode = 415
      res.end()
      break
  }
})
#+end_src

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
