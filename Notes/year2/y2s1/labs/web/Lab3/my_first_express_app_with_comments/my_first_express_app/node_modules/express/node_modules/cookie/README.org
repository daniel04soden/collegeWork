* cookie
:PROPERTIES:
:CUSTOM_ID: cookie
:END:
[[https://npmjs.org/package/cookie][[[https://badgen.net/npm/v/cookie]]]]
[[https://npmjs.org/package/cookie][[[https://badgen.net/npm/dm/cookie]]]]
[[https://nodejs.org/en/download][[[https://badgen.net/npm/node/cookie]]]]
[[https://github.com/jshttp/cookie/actions/workflows/ci.yml][[[https://badgen.net/github/checks/jshttp/cookie/master?label=ci]]]]
[[https://coveralls.io/r/jshttp/cookie?branch=master][[[https://badgen.net/coveralls/c/github/jshttp/cookie/master]]]]

Basic HTTP cookie parser and serializer for HTTP servers.

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_src sh
$ npm install cookie
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
#+begin_src js
var cookie = require('cookie');
#+end_src

*** cookie.parse(str, options)
:PROPERTIES:
:CUSTOM_ID: cookie.parsestr-options
:END:
Parse an HTTP =Cookie= header string and returning an object of all
cookie name-value pairs. The =str= argument is the string representing a
=Cookie= header value and =options= is an optional object containing
additional parsing options.

#+begin_src js
var cookies = cookie.parse('foo=bar; equation=E%3Dmc%5E2');
// { foo: 'bar', equation: 'E=mc^2' }
#+end_src

**** Options
:PROPERTIES:
:CUSTOM_ID: options
:END:
=cookie.parse= accepts these properties in the options object.

***** decode
:PROPERTIES:
:CUSTOM_ID: decode
:END:
Specifies a function that will be used to decode a cookie's value. Since
the value of a cookie has a limited character set (and must be a simple
string), this function can be used to decode a previously-encoded cookie
value into a JavaScript string or other object.

The default function is the global =decodeURIComponent=, which will
decode any URL-encoded sequences into their byte representations.

*note* if an error is thrown from this function, the original,
non-decoded cookie value will be returned as the cookie's value.

*** cookie.serialize(name, value, options)
:PROPERTIES:
:CUSTOM_ID: cookie.serializename-value-options
:END:
Serialize a cookie name-value pair into a =Set-Cookie= header string.
The =name= argument is the name for the cookie, the =value= argument is
the value to set the cookie to, and the =options= argument is an
optional object containing additional serialization options.

#+begin_src js
var setCookie = cookie.serialize('foo', 'bar');
// foo=bar
#+end_src

**** Options
:PROPERTIES:
:CUSTOM_ID: options-1
:END:
=cookie.serialize= accepts these properties in the options object.

***** domain
:PROPERTIES:
:CUSTOM_ID: domain
:END:
Specifies the value for the
[[https://tools.ietf.org/html/rfc6265#section-5.2.3][=Domain=
=Set-Cookie= attribute]]. By default, no domain is set, and most clients
will consider the cookie to apply to only the current domain.

***** encode
:PROPERTIES:
:CUSTOM_ID: encode
:END:
Specifies a function that will be used to encode a cookie's value. Since
value of a cookie has a limited character set (and must be a simple
string), this function can be used to encode a value into a string
suited for a cookie's value.

The default function is the global =encodeURIComponent=, which will
encode a JavaScript string into UTF-8 byte sequences and then URL-encode
any that fall outside of the cookie range.

***** expires
:PROPERTIES:
:CUSTOM_ID: expires
:END:
Specifies the =Date= object to be the value for the
[[https://tools.ietf.org/html/rfc6265#section-5.2.1][=Expires=
=Set-Cookie= attribute]]. By default, no expiration is set, and most
clients will consider this a "non-persistent cookie" and will delete it
on a condition like exiting a web browser application.

*note* the [[https://tools.ietf.org/html/rfc6265#section-5.3][cookie
storage model specification]] states that if both =expires= and =maxAge=
are set, then =maxAge= takes precedence, but it is possible not all
clients by obey this, so if both are set, they should point to the same
date and time.

***** httpOnly
:PROPERTIES:
:CUSTOM_ID: httponly
:END:
Specifies the =boolean= value for the
[[https://tools.ietf.org/html/rfc6265#section-5.2.6][=HttpOnly=
=Set-Cookie= attribute]]. When truthy, the =HttpOnly= attribute is set,
otherwise it is not. By default, the =HttpOnly= attribute is not set.

*note* be careful when setting this to =true=, as compliant clients will
not allow client-side JavaScript to see the cookie in =document.cookie=.

***** maxAge
:PROPERTIES:
:CUSTOM_ID: maxage
:END:
Specifies the =number= (in seconds) to be the value for the
[[https://tools.ietf.org/html/rfc6265#section-5.2.2][=Max-Age=
=Set-Cookie= attribute]]. The given number will be converted to an
integer by rounding down. By default, no maximum age is set.

*note* the [[https://tools.ietf.org/html/rfc6265#section-5.3][cookie
storage model specification]] states that if both =expires= and =maxAge=
are set, then =maxAge= takes precedence, but it is possible not all
clients by obey this, so if both are set, they should point to the same
date and time.

***** partitioned
:PROPERTIES:
:CUSTOM_ID: partitioned
:END:
Specifies the =boolean= value for the
[[file:rfc-cutler-httpbis-partitioned-cookies][=Partitioned=
=Set-Cookie=]] attribute. When truthy, the =Partitioned= attribute is
set, otherwise it is not. By default, the =Partitioned= attribute is not
set.

*note* This is an attribute that has not yet been fully standardized,
and may change in the future. This also means many clients may ignore
this attribute until they understand it.

More information about can be found in
[[https://github.com/privacycg/CHIPS][the proposal]].

***** path
:PROPERTIES:
:CUSTOM_ID: path
:END:
Specifies the value for the
[[https://tools.ietf.org/html/rfc6265#section-5.2.4][=Path= =Set-Cookie=
attribute]]. By default, the path is considered the
[[https://tools.ietf.org/html/rfc6265#section-5.1.4]["default path"]].

***** priority
:PROPERTIES:
:CUSTOM_ID: priority
:END:
Specifies the =string= to be the value for the
[[https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1][=Priority=
=Set-Cookie= attribute]].

- ='low'= will set the =Priority= attribute to =Low=.
- ='medium'= will set the =Priority= attribute to =Medium=, the default
  priority when not set.
- ='high'= will set the =Priority= attribute to =High=.

More information about the different priority levels can be found in
[[https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1][the
specification]].

*note* This is an attribute that has not yet been fully standardized,
and may change in the future. This also means many clients may ignore
this attribute until they understand it.

***** sameSite
:PROPERTIES:
:CUSTOM_ID: samesite
:END:
Specifies the =boolean= or =string= to be the value for the
[[https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7][=SameSite=
=Set-Cookie= attribute]].

- =true= will set the =SameSite= attribute to =Strict= for strict same
  site enforcement.
- =false= will not set the =SameSite= attribute.
- ='lax'= will set the =SameSite= attribute to =Lax= for lax same site
  enforcement.
- ='none'= will set the =SameSite= attribute to =None= for an explicit
  cross-site cookie.
- ='strict'= will set the =SameSite= attribute to =Strict= for strict
  same site enforcement.

More information about the different enforcement levels can be found in
[[https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7][the
specification]].

*note* This is an attribute that has not yet been fully standardized,
and may change in the future. This also means many clients may ignore
this attribute until they understand it.

***** secure
:PROPERTIES:
:CUSTOM_ID: secure
:END:
Specifies the =boolean= value for the
[[https://tools.ietf.org/html/rfc6265#section-5.2.5][=Secure=
=Set-Cookie= attribute]]. When truthy, the =Secure= attribute is set,
otherwise it is not. By default, the =Secure= attribute is not set.

*note* be careful when setting this to =true=, as compliant clients will
not send the cookie back to the server in the future if the browser does
not have an HTTPS connection.

** Example
:PROPERTIES:
:CUSTOM_ID: example
:END:
The following example uses this module in conjunction with the Node.js
core HTTP server to prompt a user for their name and display it back on
future visits.

#+begin_src js
var cookie = require('cookie');
var escapeHtml = require('escape-html');
var http = require('http');
var url = require('url');

function onRequest(req, res) {
  // Parse the query string
  var query = url.parse(req.url, true, true).query;

  if (query && query.name) {
    // Set a new cookie with the name
    res.setHeader('Set-Cookie', cookie.serialize('name', String(query.name), {
      httpOnly: true,
      maxAge: 60 * 60 * 24 * 7 // 1 week
    }));

    // Redirect back after setting cookie
    res.statusCode = 302;
    res.setHeader('Location', req.headers.referer || '/');
    res.end();
    return;
  }

  // Parse the cookies on the request
  var cookies = cookie.parse(req.headers.cookie || '');

  // Get the visitor name set in the cookie
  var name = cookies.name;

  res.setHeader('Content-Type', 'text/html; charset=UTF-8');

  if (name) {
    res.write('<p>Welcome back, <b>' + escapeHtml(name) + '</b>!</p>');
  } else {
    res.write('<p>Hello, new visitor!</p>');
  }

  res.write('<form method="GET">');
  res.write('<input placeholder="enter your name" name="name"> <input type="submit" value="Set Name">');
  res.end('</form>');
}

http.createServer(onRequest).listen(3000);
#+end_src

** Testing
:PROPERTIES:
:CUSTOM_ID: testing
:END:
#+begin_src sh
$ npm test
#+end_src

** Benchmark
:PROPERTIES:
:CUSTOM_ID: benchmark
:END:
#+begin_example
$ npm run bench

> cookie@0.5.0 bench
> node benchmark/index.js

  node@18.18.2
  acorn@8.10.0
  ada@2.6.0
  ares@1.19.1
  brotli@1.0.9
  cldr@43.1
  icu@73.2
  llhttp@6.0.11
  modules@108
  napi@9
  nghttp2@1.57.0
  nghttp3@0.7.0
  ngtcp2@0.8.1
  openssl@3.0.10+quic
  simdutf@3.2.14
  tz@2023c
  undici@5.26.3
  unicode@15.0
  uv@1.44.2
  uvwasi@0.0.18
  v8@10.2.154.26-node.26
  zlib@1.2.13.1-motley

> node benchmark/parse-top.js

  cookie.parse - top sites

  14 tests completed.

  parse accounts.google.com x 2,588,913 ops/sec ±0.74% (186 runs sampled)
  parse apple.com           x 2,370,002 ops/sec ±0.69% (186 runs sampled)
  parse cloudflare.com      x 2,213,102 ops/sec ±0.88% (188 runs sampled)
  parse docs.google.com     x 2,194,157 ops/sec ±1.03% (184 runs sampled)
  parse drive.google.com    x 2,265,084 ops/sec ±0.79% (187 runs sampled)
  parse en.wikipedia.org    x   457,099 ops/sec ±0.81% (186 runs sampled)
  parse linkedin.com        x   504,407 ops/sec ±0.89% (186 runs sampled)
  parse maps.google.com     x 1,230,959 ops/sec ±0.98% (186 runs sampled)
  parse microsoft.com       x   926,294 ops/sec ±0.88% (184 runs sampled)
  parse play.google.com     x 2,311,338 ops/sec ±0.83% (185 runs sampled)
  parse support.google.com  x 1,508,850 ops/sec ±0.86% (186 runs sampled)
  parse www.google.com      x 1,022,582 ops/sec ±1.32% (182 runs sampled)
  parse youtu.be            x   332,136 ops/sec ±1.02% (185 runs sampled)
  parse youtube.com         x   323,833 ops/sec ±0.77% (183 runs sampled)

> node benchmark/parse.js

  cookie.parse - generic

  6 tests completed.

  simple      x 3,214,032 ops/sec ±1.61% (183 runs sampled)
  decode      x   587,237 ops/sec ±1.16% (187 runs sampled)
  unquote     x 2,954,618 ops/sec ±1.35% (183 runs sampled)
  duplicates  x   857,008 ops/sec ±0.89% (187 runs sampled)
  10 cookies  x   292,133 ops/sec ±0.89% (187 runs sampled)
  100 cookies x    22,610 ops/sec ±0.68% (187 runs sampled)
#+end_example

** References
:PROPERTIES:
:CUSTOM_ID: references
:END:
- [[https://tools.ietf.org/html/rfc6265][RFC 6265: HTTP State Management
  Mechanism]]
- [[https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7][Same-site
  Cookies]]

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
