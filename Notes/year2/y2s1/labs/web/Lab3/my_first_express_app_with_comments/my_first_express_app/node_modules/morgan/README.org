* morgan
:PROPERTIES:
:CUSTOM_ID: morgan
:END:
[[https://npmjs.org/package/morgan][[[https://img.shields.io/npm/v/morgan.svg]]]]
[[https://npmjs.org/package/morgan][[[https://img.shields.io/npm/dm/morgan.svg]]]]
[[https://travis-ci.org/expressjs/morgan][[[https://img.shields.io/travis/expressjs/morgan/master.svg]]]]
[[https://coveralls.io/r/expressjs/morgan?branch=master][[[https://img.shields.io/coveralls/expressjs/morgan/master.svg]]]]

HTTP request logger middleware for node.js

#+begin_quote
Named after [[http://en.wikipedia.org/wiki/Dexter_Morgan][Dexter]], a
show you should not watch until completion.
#+end_quote

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:

#+begin_html
  <!-- eslint-disable no-unused-vars -->
#+end_html

#+begin_src js
var morgan = require('morgan')
#+end_src

*** morgan(format, options)
:PROPERTIES:
:CUSTOM_ID: morganformat-options
:END:
Create a new morgan logger middleware function using the given =format=
and =options=. The =format= argument may be a string of a predefined
name (see below for the names), a string of a format string, or a
function that will produce a log entry.

The =format= function will be called with three arguments =tokens=,
=req=, and =res=, where =tokens= is an object with all defined tokens,
=req= is the HTTP request and =res= is the HTTP response. The function
is expected to return a string that will be the log line, or =undefined=
/ =null= to skip logging.

**** Using a predefined format string
:PROPERTIES:
:CUSTOM_ID: using-a-predefined-format-string
:END:

#+begin_html
  <!-- eslint-disable no-undef -->
#+end_html

#+begin_src js
morgan('tiny')
#+end_src

**** Using format string of predefined tokens
:PROPERTIES:
:CUSTOM_ID: using-format-string-of-predefined-tokens
:END:

#+begin_html
  <!-- eslint-disable no-undef -->
#+end_html

#+begin_src js
morgan(':method :url :status :res[content-length] - :response-time ms')
#+end_src

**** Using a custom format function
:PROPERTIES:
:CUSTOM_ID: using-a-custom-format-function
:END:

#+begin_html
  <!-- eslint-disable no-undef -->
#+end_html

#+begin_src js
morgan(function (tokens, req, res) {
  return [
    tokens.method(req, res),
    tokens.url(req, res),
    tokens.status(req, res),
    tokens.res(req, res, 'content-length'), '-',
    tokens['response-time'](req, res), 'ms'
  ].join(' ')
})
#+end_src

**** Options
:PROPERTIES:
:CUSTOM_ID: options
:END:
Morgan accepts these properties in the options object.

***** immediate
:PROPERTIES:
:CUSTOM_ID: immediate
:END:
Write log line on request instead of response. This means that a
requests will be logged even if the server crashes, /but data from the
response (like the response code, content length, etc.) cannot be
logged/.

***** skip
:PROPERTIES:
:CUSTOM_ID: skip
:END:
Function to determine if logging is skipped, defaults to =false=. This
function will be called as =skip(req, res)=.

#+begin_html
  <!-- eslint-disable no-undef -->
#+end_html

#+begin_src js
// EXAMPLE: only log error responses
morgan('combined', {
  skip: function (req, res) { return res.statusCode < 400 }
})
#+end_src

***** stream
:PROPERTIES:
:CUSTOM_ID: stream
:END:
Output stream for writing log lines, defaults to =process.stdout=.

**** Predefined Formats
:PROPERTIES:
:CUSTOM_ID: predefined-formats
:END:
There are various pre-defined formats provided:

***** combined
:PROPERTIES:
:CUSTOM_ID: combined
:END:
Standard Apache combined log output.

#+begin_example
:remote-addr - :remote-user [:date[clf]] ":method :url HTTP/:http-version" :status :res[content-length] ":referrer" ":user-agent"
#+end_example

***** common
:PROPERTIES:
:CUSTOM_ID: common
:END:
Standard Apache common log output.

#+begin_example
:remote-addr - :remote-user [:date[clf]] ":method :url HTTP/:http-version" :status :res[content-length]
#+end_example

***** dev
:PROPERTIES:
:CUSTOM_ID: dev
:END:
Concise output colored by response status for development use. The
=:status= token will be colored red for server error codes, yellow for
client error codes, cyan for redirection codes, and uncolored for all
other codes.

#+begin_example
:method :url :status :response-time ms - :res[content-length]
#+end_example

***** short
:PROPERTIES:
:CUSTOM_ID: short
:END:
Shorter than default, also including response time.

#+begin_example
:remote-addr :remote-user :method :url HTTP/:http-version :status :res[content-length] - :response-time ms
#+end_example

***** tiny
:PROPERTIES:
:CUSTOM_ID: tiny
:END:
The minimal output.

#+begin_example
:method :url :status :res[content-length] - :response-time ms
#+end_example

**** Tokens
:PROPERTIES:
:CUSTOM_ID: tokens
:END:
***** Creating new tokens
:PROPERTIES:
:CUSTOM_ID: creating-new-tokens
:END:
To define a token, simply invoke =morgan.token()= with the name and a
callback function. This callback function is expected to return a string
value. The value returned is then available as ":type" in this case:

#+begin_html
  <!-- eslint-disable no-undef -->
#+end_html

#+begin_src js
morgan.token('type', function (req, res) { return req.headers['content-type'] })
#+end_src

Calling =morgan.token()= using the same name as an existing token will
overwrite that token definition.

The token function is expected to be called with the arguments =req= and
=res=, representing the HTTP request and HTTP response. Additionally,
the token can accept further arguments of it's choosing to customize
behavior.

***** :date[format]
:PROPERTIES:
:CUSTOM_ID: dateformat
:END:
The current date and time in UTC. The available formats are:

- =clf= for the common log format (="10/Oct/2000:13:55:36 +0000"=)
- =iso= for the common ISO 8601 date time format
  (=2000-10-10T13:55:36.000Z=)
- =web= for the common RFC 1123 date time format
  (=Tue, 10 Oct 2000 13:55:36 GMT=)

If no format is given, then the default is =web=.

***** :http-version
:PROPERTIES:
:CUSTOM_ID: http-version
:END:
The HTTP version of the request.

***** :method
:PROPERTIES:
:CUSTOM_ID: method
:END:
The HTTP method of the request.

***** :referrer
:PROPERTIES:
:CUSTOM_ID: referrer
:END:
The Referrer header of the request. This will use the standard
mis-spelled Referer header if exists, otherwise Referrer.

***** :remote-addr
:PROPERTIES:
:CUSTOM_ID: remote-addr
:END:
The remote address of the request. This will use =req.ip=, otherwise the
standard =req.connection.remoteAddress= value (socket address).

***** :remote-user
:PROPERTIES:
:CUSTOM_ID: remote-user
:END:
The user authenticated as part of Basic auth for the request.

***** :req[header]
:PROPERTIES:
:CUSTOM_ID: reqheader
:END:
The given =header= of the request. If the header is not present, the
value will be displayed as ="-"= in the log.

***** :res[header]
:PROPERTIES:
:CUSTOM_ID: resheader
:END:
The given =header= of the response. If the header is not present, the
value will be displayed as ="-"= in the log.

***** :response-time[digits]
:PROPERTIES:
:CUSTOM_ID: response-timedigits
:END:
The time between the request coming into =morgan= and when the response
headers are written, in milliseconds.

The =digits= argument is a number that specifies the number of digits to
include on the number, defaulting to =3=, which provides microsecond
precision.

***** :status
:PROPERTIES:
:CUSTOM_ID: status
:END:
The status code of the response.

If the request/response cycle completes before a response was sent to
the client (for example, the TCP socket closed prematurely by a client
aborting the request), then the status will be empty (displayed as ="-"=
in the log).

***** :url
:PROPERTIES:
:CUSTOM_ID: url
:END:
The URL of the request. This will use =req.originalUrl= if exists,
otherwise =req.url=.

***** :user-agent
:PROPERTIES:
:CUSTOM_ID: user-agent
:END:
The contents of the User-Agent header of the request.

*** morgan.compile(format)
:PROPERTIES:
:CUSTOM_ID: morgan.compileformat
:END:
Compile a format string into a =format= function for use by =morgan=. A
format string is a string that represents a single log line and can
utilize token syntax. Tokens are references by =:token-name=. If tokens
accept arguments, they can be passed using =[]=, for example:
=:token-name[pretty]= would pass the string ='pretty'= as an argument to
the token =token-name=.

The function returned from =morgan.compile= takes three arguments
=tokens=, =req=, and =res=, where =tokens= is object with all defined
tokens, =req= is the HTTP request and =res= is the HTTP response. The
function will return a string that will be the log line, or =undefined=
/ =null= to skip logging.

Normally formats are defined using =morgan.format(name, format)=, but
for certain advanced uses, this compile function is directly available.

** Examples
:PROPERTIES:
:CUSTOM_ID: examples
:END:
*** express/connect
:PROPERTIES:
:CUSTOM_ID: expressconnect
:END:
Simple app that will log all request in the Apache combined format to
STDOUT

#+begin_src js
var express = require('express')
var morgan = require('morgan')

var app = express()

app.use(morgan('combined'))

app.get('/', function (req, res) {
  res.send('hello, world!')
})
#+end_src

*** vanilla http server
:PROPERTIES:
:CUSTOM_ID: vanilla-http-server
:END:
Simple app that will log all request in the Apache combined format to
STDOUT

#+begin_src js
var finalhandler = require('finalhandler')
var http = require('http')
var morgan = require('morgan')

// create "middleware"
var logger = morgan('combined')

http.createServer(function (req, res) {
  var done = finalhandler(req, res)
  logger(req, res, function (err) {
    if (err) return done(err)

    // respond to request
    res.setHeader('content-type', 'text/plain')
    res.end('hello, world!')
  })
})
#+end_src

*** write logs to a file
:PROPERTIES:
:CUSTOM_ID: write-logs-to-a-file
:END:
**** single file
:PROPERTIES:
:CUSTOM_ID: single-file
:END:
Simple app that will log all requests in the Apache combined format to
the file =access.log=.

#+begin_src js
var express = require('express')
var fs = require('fs')
var morgan = require('morgan')
var path = require('path')

var app = express()

// create a write stream (in append mode)
var accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), { flags: 'a' })

// setup the logger
app.use(morgan('combined', { stream: accessLogStream }))

app.get('/', function (req, res) {
  res.send('hello, world!')
})
#+end_src

**** log file rotation
:PROPERTIES:
:CUSTOM_ID: log-file-rotation
:END:
Simple app that will log all requests in the Apache combined format to
one log file per day in the =log/= directory using the
[[https://www.npmjs.com/package/rotating-file-stream][rotating-file-stream
module]].

#+begin_src js
var express = require('express')
var fs = require('fs')
var morgan = require('morgan')
var path = require('path')
var rfs = require('rotating-file-stream')

var app = express()
var logDirectory = path.join(__dirname, 'log')

// ensure log directory exists
fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)

// create a rotating write stream
var accessLogStream = rfs('access.log', {
  interval: '1d', // rotate daily
  path: logDirectory
})

// setup the logger
app.use(morgan('combined', { stream: accessLogStream }))

app.get('/', function (req, res) {
  res.send('hello, world!')
})
#+end_src

*** split / dual logging
:PROPERTIES:
:CUSTOM_ID: split-dual-logging
:END:
The =morgan= middleware can be used as many times as needed, enabling
combinations like:

- Log entry on request and one on response
- Log all requests to file, but errors to console
- ... and more!

Sample app that will log all requests to a file using Apache format, but
error responses are logged to the console:

#+begin_src js
var express = require('express')
var fs = require('fs')
var morgan = require('morgan')
var path = require('path')

var app = express()

// log only 4xx and 5xx responses to console
app.use(morgan('dev', {
  skip: function (req, res) { return res.statusCode < 400 }
}))

// log all requests to access.log
app.use(morgan('common', {
  stream: fs.createWriteStream(path.join(__dirname, 'access.log'), { flags: 'a' })
}))

app.get('/', function (req, res) {
  res.send('hello, world!')
})
#+end_src

*** use custom token formats
:PROPERTIES:
:CUSTOM_ID: use-custom-token-formats
:END:
Sample app that will use custom token formats. This adds an ID to all
requests and displays it using the =:id= token.

#+begin_src js
var express = require('express')
var morgan = require('morgan')
var uuid = require('node-uuid')

morgan.token('id', function getId (req) {
  return req.id
})

var app = express()

app.use(assignId)
app.use(morgan(':id :method :url :response-time'))

app.get('/', function (req, res) {
  res.send('hello, world!')
})

function assignId (req, res, next) {
  req.id = uuid.v4()
  next()
}
#+end_src

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
