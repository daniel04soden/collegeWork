* mime-types
:PROPERTIES:
:CUSTOM_ID: mime-types
:END:
[[https://npmjs.org/package/mime-types][[[https://badgen.net/npm/v/mime-types]]]]
[[https://npmjs.org/package/mime-types][[[https://badgen.net/npm/dm/mime-types]]]]
[[https://nodejs.org/en/download][[[https://badgen.net/npm/node/mime-types]]]]
[[https://github.com/jshttp/mime-types/actions/workflows/ci.yml][[[https://badgen.net/github/checks/jshttp/mime-types/master?label=ci]]]]
[[https://coveralls.io/r/jshttp/mime-types?branch=master][[[https://badgen.net/coveralls/c/github/jshttp/mime-types/master]]]]

The ultimate javascript content-type utility.

Similar to [[https://www.npmjs.com/package/mime][the =mime@1.x=
module]], except:

- *No fallbacks.* Instead of naively returning the first available type,
  =mime-types= simply returns =false=, so do
  =var type = mime.lookup('unrecognized') || 'application/octet-stream'=.
- No =new Mime()= business, so you could do
  =var lookup = require('mime-types').lookup=.
- No =.define()= functionality
- Bug fixes for =.lookup(path)=

Otherwise, the API is compatible with =mime= 1.x.

** Install
:PROPERTIES:
:CUSTOM_ID: install
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_src sh
$ npm install mime-types
#+end_src

** Adding Types
:PROPERTIES:
:CUSTOM_ID: adding-types
:END:
All mime types are based on
[[https://www.npmjs.com/package/mime-db][mime-db]], so open a PR there
if you'd like to add mime types.

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
#+begin_src js
var mime = require('mime-types')
#+end_src

All functions return =false= if input is invalid or not found.

*** mime.lookup(path)
:PROPERTIES:
:CUSTOM_ID: mime.lookuppath
:END:
Lookup the content-type associated with a file.

#+begin_src js
mime.lookup('json') // 'application/json'
mime.lookup('.md') // 'text/markdown'
mime.lookup('file.html') // 'text/html'
mime.lookup('folder/file.js') // 'application/javascript'
mime.lookup('folder/.htaccess') // false

mime.lookup('cats') // false
#+end_src

*** mime.contentType(type)
:PROPERTIES:
:CUSTOM_ID: mime.contenttypetype
:END:
Create a full content-type header given a content-type or extension.
When given an extension, =mime.lookup= is used to get the matching
content-type, otherwise the given content-type is used. Then if the
content-type does not already have a =charset= parameter, =mime.charset=
is used to get the default charset and add to the returned content-type.

#+begin_src js
mime.contentType('markdown') // 'text/x-markdown; charset=utf-8'
mime.contentType('file.json') // 'application/json; charset=utf-8'
mime.contentType('text/html') // 'text/html; charset=utf-8'
mime.contentType('text/html; charset=iso-8859-1') // 'text/html; charset=iso-8859-1'

// from a full path
mime.contentType(path.extname('/path/to/file.json')) // 'application/json; charset=utf-8'
#+end_src

*** mime.extension(type)
:PROPERTIES:
:CUSTOM_ID: mime.extensiontype
:END:
Get the default extension for a content-type.

#+begin_src js
mime.extension('application/octet-stream') // 'bin'
#+end_src

*** mime.charset(type)
:PROPERTIES:
:CUSTOM_ID: mime.charsettype
:END:
Lookup the implied default charset of a content-type.

#+begin_src js
mime.charset('text/markdown') // 'UTF-8'
#+end_src

*** var type = mime.types[extension]
:PROPERTIES:
:CUSTOM_ID: var-type-mime.typesextension
:END:
A map of content-types by extension.

*** [extensions...] = mime.extensions[type]
:PROPERTIES:
:CUSTOM_ID: extensions-mime.extensionstype
:END:
A map of extensions by content-type.

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
