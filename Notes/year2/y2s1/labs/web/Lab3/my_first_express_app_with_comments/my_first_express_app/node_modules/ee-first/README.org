* EE First
:PROPERTIES:
:CUSTOM_ID: ee-first
:END:
[[https://npmjs.org/package/ee-first][[[https://img.shields.io/npm/v/ee-first.svg?style=flat-square]]]]
[[https://travis-ci.org/jonathanong/ee-first][[[https://img.shields.io/travis/jonathanong/ee-first.svg?style=flat-square]]]]
[[https://coveralls.io/r/jonathanong/ee-first?branch=master][[[https://img.shields.io/coveralls/jonathanong/ee-first.svg?style=flat-square]]]]
[[file:LICENSE.md][[[http://img.shields.io/npm/l/ee-first.svg?style=flat-square]]]]
[[https://npmjs.org/package/ee-first][[[http://img.shields.io/npm/dm/ee-first.svg?style=flat-square]]]]
[[https://www.gittip.com/jonathanong/][[[https://img.shields.io/gittip/jonathanong.svg?style=flat-square]]]]

Get the first event in a set of event emitters and event pairs, then
clean up after itself.

** Install
:PROPERTIES:
:CUSTOM_ID: install
:END:
#+begin_src sh
$ npm install ee-first
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
#+begin_src js
var first = require('ee-first')
#+end_src

*** first(arr, listener)
:PROPERTIES:
:CUSTOM_ID: firstarr-listener
:END:
Invoke =listener= on the first event from the list specified in =arr=.
=arr= is an array of arrays, with each array in the format
=[ee, ...event]=. =listener= will be called only once, the first time
any of the given events are emitted. If =error= is one of the listened
events, then if that fires first, the =listener= will be given the =err=
argument.

The =listener= is invoked as =listener(err, ee, event, args)=, where
=err= is the first argument emitted from an =error= event, if
applicable; =ee= is the event emitter that fired; =event= is the string
event name that fired; and =args= is an array of the arguments that were
emitted on the event.

#+begin_src js
var ee1 = new EventEmitter()
var ee2 = new EventEmitter()

first([
  [ee1, 'close', 'end', 'error'],
  [ee2, 'error']
], function (err, ee, event, args) {
  // listener invoked
})
#+end_src

**** .cancel()
:PROPERTIES:
:CUSTOM_ID: cancel
:END:
The group of listeners can be cancelled before being invoked and have
all the event listeners removed from the underlying event emitters.

#+begin_src js
var thunk = first([
  [ee1, 'close', 'end', 'error'],
  [ee2, 'error']
], function (err, ee, event, args) {
  // listener invoked
})

// cancel and clean up
thunk.cancel()
#+end_src
