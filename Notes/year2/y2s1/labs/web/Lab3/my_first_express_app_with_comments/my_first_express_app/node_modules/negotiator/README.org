* negotiator
:PROPERTIES:
:CUSTOM_ID: negotiator
:END:
[[https://npmjs.org/package/negotiator][[[https://img.shields.io/npm/v/negotiator.svg]]]]
[[https://npmjs.org/package/negotiator][[[https://img.shields.io/npm/dm/negotiator.svg]]]]
[[https://nodejs.org/en/download/][[[https://img.shields.io/node/v/negotiator.svg]]]]
[[https://github.com/jshttp/negotiator/actions/workflows/ci.yml][[[https://img.shields.io/github/workflow/status/jshttp/negotiator/ci/master?label=ci]]]]
[[https://coveralls.io/r/jshttp/negotiator?branch=master][[[https://img.shields.io/coveralls/jshttp/negotiator/master.svg]]]]

An HTTP content negotiator for Node.js

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
#+begin_src sh
$ npm install negotiator
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
#+begin_src js
var Negotiator = require('negotiator')
#+end_src

*** Accept Negotiation
:PROPERTIES:
:CUSTOM_ID: accept-negotiation
:END:
#+begin_src js
availableMediaTypes = ['text/html', 'text/plain', 'application/json']

// The negotiator constructor receives a request object
negotiator = new Negotiator(request)

// Let's say Accept header is 'text/html, application/*;q=0.2, image/jpeg;q=0.8'

negotiator.mediaTypes()
// -> ['text/html', 'image/jpeg', 'application/*']

negotiator.mediaTypes(availableMediaTypes)
// -> ['text/html', 'application/json']

negotiator.mediaType(availableMediaTypes)
// -> 'text/html'
#+end_src

You can check a working example at =examples/accept.js=.

**** Methods
:PROPERTIES:
:CUSTOM_ID: methods
:END:
***** mediaType()
:PROPERTIES:
:CUSTOM_ID: mediatype
:END:
Returns the most preferred media type from the client.

***** mediaType(availableMediaType)
:PROPERTIES:
:CUSTOM_ID: mediatypeavailablemediatype
:END:
Returns the most preferred media type from a list of available media
types.

***** mediaTypes()
:PROPERTIES:
:CUSTOM_ID: mediatypes
:END:
Returns an array of preferred media types ordered by the client
preference.

***** mediaTypes(availableMediaTypes)
:PROPERTIES:
:CUSTOM_ID: mediatypesavailablemediatypes
:END:
Returns an array of preferred media types ordered by priority from a
list of available media types.

*** Accept-Language Negotiation
:PROPERTIES:
:CUSTOM_ID: accept-language-negotiation
:END:
#+begin_src js
negotiator = new Negotiator(request)

availableLanguages = ['en', 'es', 'fr']

// Let's say Accept-Language header is 'en;q=0.8, es, pt'

negotiator.languages()
// -> ['es', 'pt', 'en']

negotiator.languages(availableLanguages)
// -> ['es', 'en']

language = negotiator.language(availableLanguages)
// -> 'es'
#+end_src

You can check a working example at =examples/language.js=.

**** Methods
:PROPERTIES:
:CUSTOM_ID: methods-1
:END:
***** language()
:PROPERTIES:
:CUSTOM_ID: language
:END:
Returns the most preferred language from the client.

***** language(availableLanguages)
:PROPERTIES:
:CUSTOM_ID: languageavailablelanguages
:END:
Returns the most preferred language from a list of available languages.

***** languages()
:PROPERTIES:
:CUSTOM_ID: languages
:END:
Returns an array of preferred languages ordered by the client
preference.

***** languages(availableLanguages)
:PROPERTIES:
:CUSTOM_ID: languagesavailablelanguages
:END:
Returns an array of preferred languages ordered by priority from a list
of available languages.

*** Accept-Charset Negotiation
:PROPERTIES:
:CUSTOM_ID: accept-charset-negotiation
:END:
#+begin_src js
availableCharsets = ['utf-8', 'iso-8859-1', 'iso-8859-5']

negotiator = new Negotiator(request)

// Let's say Accept-Charset header is 'utf-8, iso-8859-1;q=0.8, utf-7;q=0.2'

negotiator.charsets()
// -> ['utf-8', 'iso-8859-1', 'utf-7']

negotiator.charsets(availableCharsets)
// -> ['utf-8', 'iso-8859-1']

negotiator.charset(availableCharsets)
// -> 'utf-8'
#+end_src

You can check a working example at =examples/charset.js=.

**** Methods
:PROPERTIES:
:CUSTOM_ID: methods-2
:END:
***** charset()
:PROPERTIES:
:CUSTOM_ID: charset
:END:
Returns the most preferred charset from the client.

***** charset(availableCharsets)
:PROPERTIES:
:CUSTOM_ID: charsetavailablecharsets
:END:
Returns the most preferred charset from a list of available charsets.

***** charsets()
:PROPERTIES:
:CUSTOM_ID: charsets
:END:
Returns an array of preferred charsets ordered by the client preference.

***** charsets(availableCharsets)
:PROPERTIES:
:CUSTOM_ID: charsetsavailablecharsets
:END:
Returns an array of preferred charsets ordered by priority from a list
of available charsets.

*** Accept-Encoding Negotiation
:PROPERTIES:
:CUSTOM_ID: accept-encoding-negotiation
:END:
#+begin_src js
availableEncodings = ['identity', 'gzip']

negotiator = new Negotiator(request)

// Let's say Accept-Encoding header is 'gzip, compress;q=0.2, identity;q=0.5'

negotiator.encodings()
// -> ['gzip', 'identity', 'compress']

negotiator.encodings(availableEncodings)
// -> ['gzip', 'identity']

negotiator.encoding(availableEncodings)
// -> 'gzip'
#+end_src

You can check a working example at =examples/encoding.js=.

**** Methods
:PROPERTIES:
:CUSTOM_ID: methods-3
:END:
***** encoding()
:PROPERTIES:
:CUSTOM_ID: encoding
:END:
Returns the most preferred encoding from the client.

***** encoding(availableEncodings)
:PROPERTIES:
:CUSTOM_ID: encodingavailableencodings
:END:
Returns the most preferred encoding from a list of available encodings.

***** encodings()
:PROPERTIES:
:CUSTOM_ID: encodings
:END:
Returns an array of preferred encodings ordered by the client
preference.

***** encodings(availableEncodings)
:PROPERTIES:
:CUSTOM_ID: encodingsavailableencodings
:END:
Returns an array of preferred encodings ordered by priority from a list
of available encodings.

** See Also
:PROPERTIES:
:CUSTOM_ID: see-also
:END:
The [[https://npmjs.org/package/accepts#readme][accepts]] module builds
on this module and provides an alternative interface, mime type
validation, and more.

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
