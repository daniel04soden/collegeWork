* media-typer
:PROPERTIES:
:CUSTOM_ID: media-typer
:END:
[[https://npmjs.org/package/media-typer][[[https://img.shields.io/npm/v/media-typer.svg?style=flat]]]]
[[https://npmjs.org/package/media-typer][[[https://img.shields.io/npm/dm/media-typer.svg?style=flat]]]]
[[http://nodejs.org/download/][[[https://img.shields.io/badge/node.js-%3E%3D_0.6-brightgreen.svg?style=flat]]]]
[[https://travis-ci.org/jshttp/media-typer][[[https://img.shields.io/travis/jshttp/media-typer.svg?style=flat]]]]
[[https://coveralls.io/r/jshttp/media-typer][[[https://img.shields.io/coveralls/jshttp/media-typer.svg?style=flat]]]]

Simple RFC 6838 media type parser

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
#+begin_src sh
$ npm install media-typer
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
#+begin_src js
var typer = require('media-typer')
#+end_src

*** typer.parse(string)
:PROPERTIES:
:CUSTOM_ID: typer.parsestring
:END:
#+begin_src js
var obj = typer.parse('image/svg+xml; charset=utf-8')
#+end_src

Parse a media type string. This will return an object with the following
properties (examples are shown for the string
='image/svg+xml; charset=utf-8'=):

- =type=: The type of the media type (always lower case). Example:
  ='image'=

- =subtype=: The subtype of the media type (always lower case). Example:
  ='svg'=

- =suffix=: The suffix of the media type (always lower case). Example:
  ='xml'=

- =parameters=: An object of the parameters in the media type (name of
  parameter always lower case). Example: ={charset: 'utf-8'}=

*** typer.parse(req)
:PROPERTIES:
:CUSTOM_ID: typer.parsereq
:END:
#+begin_src js
var obj = typer.parse(req)
#+end_src

Parse the =content-type= header from the given =req=. Short-cut for
=typer.parse(req.headers['content-type'])=.

*** typer.parse(res)
:PROPERTIES:
:CUSTOM_ID: typer.parseres
:END:
#+begin_src js
var obj = typer.parse(res)
#+end_src

Parse the =content-type= header set on the given =res=. Short-cut for
=typer.parse(res.getHeader('content-type'))=.

*** typer.format(obj)
:PROPERTIES:
:CUSTOM_ID: typer.formatobj
:END:
#+begin_src js
var obj = typer.format({type: 'image', subtype: 'svg', suffix: 'xml'})
#+end_src

Format an object into a media type string. This will return a string of
the mime type for the given object. For the properties of the object,
see the documentation for =typer.parse(string)=.

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
