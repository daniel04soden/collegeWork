* define-data-property [[https://npmjs.org/package/define-data-property][[[https://versionbadg.es/ljharb/define-data-property.svg]]]]
:PROPERTIES:
:CUSTOM_ID: define-data-property-version-badgenpm-version-svgpackage-url
:END:
[[https://github.com/ljharb/define-data-property/actions][[[https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/define-data-property]]]]
[[https://app.codecov.io/gh/ljharb/define-data-property/][[[https://codecov.io/gh/ljharb/define-data-property/branch/main/graphs/badge.svg]]]]
[[file:LICENSE][[[https://img.shields.io/npm/l/define-data-property.svg]]]]
[[https://npm-stat.com/charts.html?package=define-data-property][[[https://img.shields.io/npm/dm/define-data-property.svg]]]]

[[https://npmjs.org/package/define-data-property][[[https://nodei.co/npm/define-data-property.png?downloads=true&stars=true]]]]

Define a data property on an object. Will fall back to assignment in an
engine without descriptors.

The three =non*= argument can also be passed =null=, which will use the
existing state if available.

The =loose= argument will mean that if you attempt to set a non-normal
data property, in an environment without descriptor support, it will
fall back to normal assignment.

** Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:
#+begin_src javascript
var defineDataProperty = require('define-data-property');
var assert = require('assert');

var obj = {};
defineDataProperty(obj, 'key', 'value');
defineDataProperty(
    obj,
    'key2',
    'value',
    true, // nonEnumerable, optional
    false, // nonWritable, optional
    true, // nonConfigurable, optional
    false // loose, optional
);

assert.deepEqual(
    Object.getOwnPropertyDescriptors(obj),
    {
        key: {
            configurable: true,
            enumerable: true,
            value: 'value',
            writable: true,
        },
        key2: {
            configurable: false,
            enumerable: false,
            value: 'value',
            writable: true,
        },
    }
);
#+end_src
