* on-finished
:PROPERTIES:
:CUSTOM_ID: on-finished
:END:
[[https://npmjs.org/package/on-finished][[[https://badgen.net/npm/v/on-finished]]]]
[[https://npmjs.org/package/on-finished][[[https://badgen.net/npm/dm/on-finished]]]]
[[https://nodejs.org/en/download][[[https://badgen.net/npm/node/on-finished]]]]
[[https://github.com/jshttp/on-finished/actions/workflows/ci.yml][[[https://badgen.net/github/checks/jshttp/on-finished/master?label=ci]]]]
[[https://coveralls.io/r/jshttp/on-finished?branch=master][[[https://badgen.net/coveralls/c/github/jshttp/on-finished/master]]]]

Execute a callback when a HTTP request closes, finishes, or errors.

** Install
:PROPERTIES:
:CUSTOM_ID: install
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_src sh
$ npm install on-finished
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
#+begin_src js
var onFinished = require('on-finished')
#+end_src

*** onFinished(res, listener)
:PROPERTIES:
:CUSTOM_ID: onfinishedres-listener
:END:
Attach a listener to listen for the response to finish. The listener
will be invoked only once when the response finished. If the response
finished to an error, the first argument will contain the error. If the
response has already finished, the listener will be invoked.

Listening to the end of a response would be used to close things
associated with the response, like open files.

Listener is invoked as =listener(err, res)=.

#+begin_html
  <!-- eslint-disable handle-callback-err -->
#+end_html

#+begin_src js
onFinished(res, function (err, res) {
  // clean up open fds, etc.
  // err contains the error if request error'd
})
#+end_src

*** onFinished(req, listener)
:PROPERTIES:
:CUSTOM_ID: onfinishedreq-listener
:END:
Attach a listener to listen for the request to finish. The listener will
be invoked only once when the request finished. If the request finished
to an error, the first argument will contain the error. If the request
has already finished, the listener will be invoked.

Listening to the end of a request would be used to know when to continue
after reading the data.

Listener is invoked as =listener(err, req)=.

#+begin_html
  <!-- eslint-disable handle-callback-err -->
#+end_html

#+begin_src js
var data = ''

req.setEncoding('utf8')
req.on('data', function (str) {
  data += str
})

onFinished(req, function (err, req) {
  // data is read unless there is err
})
#+end_src

*** onFinished.isFinished(res)
:PROPERTIES:
:CUSTOM_ID: onfinished.isfinishedres
:END:
Determine if =res= is already finished. This would be useful to check
and not even start certain operations if the response has already
finished.

*** onFinished.isFinished(req)
:PROPERTIES:
:CUSTOM_ID: onfinished.isfinishedreq
:END:
Determine if =req= is already finished. This would be useful to check
and not even start certain operations if the request has already
finished.

** Special Node.js requests
:PROPERTIES:
:CUSTOM_ID: special-node.js-requests
:END:
*** HTTP CONNECT method
:PROPERTIES:
:CUSTOM_ID: http-connect-method
:END:
The meaning of the =CONNECT= method from RFC 7231, section 4.3.6:

#+begin_quote
The CONNECT method requests that the recipient establish a tunnel to the
destination origin server identified by the request-target and, if
successful, thereafter restrict its behavior to blind forwarding of
packets, in both directions, until the tunnel is closed. Tunnels are
commonly used to create an end-to-end virtual connection, through one or
more proxies, which can then be secured using TLS (Transport Layer
Security, [RFC5246]).
#+end_quote

In Node.js, these request objects come from the ='connect'= event on the
HTTP server.

When this module is used on a HTTP =CONNECT= request, the request is
considered "finished" immediately, *due to limitations in the Node.js
interface*. This means if the =CONNECT= request contains a request
entity, the request will be considered "finished" even before it has
been read.

There is no such thing as a response object to a =CONNECT= request in
Node.js, so there is no support for one.

*** HTTP Upgrade request
:PROPERTIES:
:CUSTOM_ID: http-upgrade-request
:END:
The meaning of the =Upgrade= header from RFC 7230, section 6.1:

#+begin_quote
The "Upgrade" header field is intended to provide a simple mechanism for
transitioning from HTTP/1.1 to some other protocol on the same
connection.
#+end_quote

In Node.js, these request objects come from the ='upgrade'= event on the
HTTP server.

When this module is used on a HTTP request with an =Upgrade= header, the
request is considered "finished" immediately, *due to limitations in the
Node.js interface*. This means if the =Upgrade= request contains a
request entity, the request will be considered "finished" even before it
has been read.

There is no such thing as a response object to a =Upgrade= request in
Node.js, so there is no support for one.

** Example
:PROPERTIES:
:CUSTOM_ID: example
:END:
The following code ensures that file descriptors are always closed once
the response finishes.

#+begin_src js
var destroy = require('destroy')
var fs = require('fs')
var http = require('http')
var onFinished = require('on-finished')

http.createServer(function onRequest (req, res) {
  var stream = fs.createReadStream('package.json')
  stream.pipe(res)
  onFinished(res, function () {
    destroy(stream)
  })
})
#+end_src

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
