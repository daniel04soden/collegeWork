* mime-db
:PROPERTIES:
:CUSTOM_ID: mime-db
:END:
[[https://npmjs.org/package/mime-db][[[https://badgen.net/npm/v/mime-db]]]]
[[https://npmjs.org/package/mime-db][[[https://badgen.net/npm/dm/mime-db]]]]
[[https://nodejs.org/en/download][[[https://badgen.net/npm/node/mime-db]]]]
[[https://github.com/jshttp/mime-db/actions?query=workflow%3Aci][[[https://badgen.net/github/checks/jshttp/mime-db/master?label=ci]]]]
[[https://coveralls.io/r/jshttp/mime-db?branch=master][[[https://badgen.net/coveralls/c/github/jshttp/mime-db/master]]]]

This is a large database of mime types and information about them. It
consists of a single, public JSON file and does not include any logic,
allowing it to remain as un-opinionated as possible with an API. It
aggregates data from the following sources:

- http://www.iana.org/assignments/media-types/media-types.xhtml
- http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
- http://hg.nginx.org/nginx/raw-file/default/conf/mime.types

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
#+begin_src sh
npm install mime-db
#+end_src

*** Database Download
:PROPERTIES:
:CUSTOM_ID: database-download
:END:
If you're crazy enough to use this in the browser, you can just grab the
JSON file using [[https://www.jsdelivr.com/][jsDelivr]]. It is
recommended to replace =master= with
[[https://github.com/jshttp/mime-db/tags][a release tag]] as the JSON
format may change in the future.

#+begin_example
https://cdn.jsdelivr.net/gh/jshttp/mime-db@master/db.json
#+end_example

** Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:
#+begin_src js
var db = require('mime-db')

// grab data on .js files
var data = db['application/javascript']
#+end_src

** Data Structure
:PROPERTIES:
:CUSTOM_ID: data-structure
:END:
The JSON file is a map lookup for lowercased mime types. Each mime type
has the following properties:

- =.source= - where the mime type is defined. If not set, it's probably
  a custom media type.
  - =apache= -
    [[http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types][Apache
    common media types]]
  - =iana= -
    [[http://www.iana.org/assignments/media-types/media-types.xhtml][IANA-defined
    media types]]
  - =nginx= -
    [[http://hg.nginx.org/nginx/raw-file/default/conf/mime.types][nginx
    media types]]
- =.extensions[]= - known extensions associated with this mime type.
- =.compressible= - whether a file of this type can be gzipped.
- =.charset= - the default charset associated with this type, if any.

If unknown, every property could be =undefined=.

** Contributing
:PROPERTIES:
:CUSTOM_ID: contributing
:END:
To edit the database, only make PRs against =src/custom-types.json= or
=src/custom-suffix.json=.

The =src/custom-types.json= file is a JSON object with the MIME type as
the keys and the values being an object with the following keys:

- =compressible= - leave out if you don't know, otherwise =true=/=false=
  to indicate whether the data represented by the type is typically
  compressible.
- =extensions= - include an array of file extensions that are associated
  with the type.
- =notes= - human-readable notes about the type, typically what the type
  is.
- =sources= - include an array of URLs of where the MIME type and the
  associated extensions are sourced from. This needs to be a
  [[https://en.wikipedia.org/wiki/Primary_source][primary source]];
  links to type aggregating sites and Wikipedia are /not acceptable/.

To update the build, run =npm run build=.

*** Adding Custom Media Types
:PROPERTIES:
:CUSTOM_ID: adding-custom-media-types
:END:
The best way to get new media types included in this library is to
register them with the IANA. The community registration procedure is
outlined in [[http://tools.ietf.org/html/rfc6838#section-5][RFC 6838
section 5]]. Types registered with the IANA are automatically pulled
into this library.

If that is not possible / feasible, they can be added directly here as a
"custom" type. To do this, it is required to have a primary source that
definitively lists the media type. If an extension is going to be listed
as associateed with this media type, the source must definitively link
the media type and extension as well.
