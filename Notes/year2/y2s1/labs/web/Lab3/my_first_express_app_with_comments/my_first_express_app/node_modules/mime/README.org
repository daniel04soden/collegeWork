* mime
:PROPERTIES:
:CUSTOM_ID: mime
:END:
Comprehensive MIME type mapping API based on mime-db module.

** Install
:PROPERTIES:
:CUSTOM_ID: install
:END:
Install with [[http://github.com/isaacs/npm][npm]]:

#+begin_example
npm install mime
#+end_example

** Contributing / Testing
:PROPERTIES:
:CUSTOM_ID: contributing-testing
:END:
#+begin_example
npm run test
#+end_example

** Command Line
:PROPERTIES:
:CUSTOM_ID: command-line
:END:
#+begin_example
mime [path_string]
#+end_example

E.g.

#+begin_example
> mime scripts/jquery.js
application/javascript
#+end_example

** API - Queries
:PROPERTIES:
:CUSTOM_ID: api---queries
:END:
*** mime.lookup(path)
:PROPERTIES:
:CUSTOM_ID: mime.lookuppath
:END:
Get the mime type associated with a file, if no mime type is found
=application/octet-stream= is returned. Performs a case-insensitive
lookup using the extension in =path= (the substring after the last '/'
or '.'). E.g.

#+begin_src js
var mime = require('mime');

mime.lookup('/path/to/file.txt');         // => 'text/plain'
mime.lookup('file.txt');                  // => 'text/plain'
mime.lookup('.TXT');                      // => 'text/plain'
mime.lookup('htm');                       // => 'text/html'
#+end_src

*** mime.default_type
:PROPERTIES:
:CUSTOM_ID: mime.default_type
:END:
Sets the mime type returned when =mime.lookup= fails to find the
extension searched for. (Default is =application/octet-stream=.)

*** mime.extension(type)
:PROPERTIES:
:CUSTOM_ID: mime.extensiontype
:END:
Get the default extension for =type=

#+begin_src js
mime.extension('text/html');                 // => 'html'
mime.extension('application/octet-stream');  // => 'bin'
#+end_src

*** mime.charsets.lookup()
:PROPERTIES:
:CUSTOM_ID: mime.charsets.lookup
:END:
Map mime-type to charset

#+begin_src js
mime.charsets.lookup('text/plain');        // => 'UTF-8'
#+end_src

(The logic for charset lookups is pretty rudimentary. Feel free to
suggest improvements.)

** API - Defining Custom Types
:PROPERTIES:
:CUSTOM_ID: api---defining-custom-types
:END:
Custom type mappings can be added on a per-project basis via the
following APIs.

*** mime.define()
:PROPERTIES:
:CUSTOM_ID: mime.define
:END:
Add custom mime/extension mappings

#+begin_src js
mime.define({
    'text/x-some-format': ['x-sf', 'x-sft', 'x-sfml'],
    'application/x-my-type': ['x-mt', 'x-mtt'],
    // etc ...
});

mime.lookup('x-sft');                 // => 'text/x-some-format'
#+end_src

The first entry in the extensions array is returned by
=mime.extension()=. E.g.

#+begin_src js
mime.extension('text/x-some-format'); // => 'x-sf'
#+end_src

*** mime.load(filepath)
:PROPERTIES:
:CUSTOM_ID: mime.loadfilepath
:END:
Load mappings from an Apache ".types" format file

#+begin_src js
mime.load('./my_project.types');
#+end_src

The .types file format is simple - See the =types= dir for examples.
