* with
:PROPERTIES:
:CUSTOM_ID: with
:END:
Compile time =with= for strict mode JavaScript

[[http://travis-ci.org/ForbesLindesay/with][[[https://secure.travis-ci.org/ForbesLindesay/with.png]]]]
[[https://gemnasium.com/ForbesLindesay/with][[[https://img.shields.io/gemnasium/ForbesLindesay/with.svg]]]]
[[http://badge.fury.io/js/with][[[https://img.shields.io/npm/v/with.svg]]]]

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
#+begin_example
$ npm install with
#+end_example

** Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:
#+begin_src js
var addWith = require('with')

addWith('obj', 'console.log(a)')
// => ';(function (console, a) {
//       console.log(a)
//     }("console" in obj ? obj.console :
//                          typeof console!=="undefined" ? console : undefined,
//       "a" in obj ? obj.a :
//                    typeof a !== "undefined" ? a : undefined));'

addWith('obj', 'console.log(a)', ['console'])
// => ';(function (console, a) {
//       console.log(a)
//     }("a" in obj ? obj.a :
//                    typeof a !== "undefined" ? a : undefined));'
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
*** addWith(obj, src[, exclude])
:PROPERTIES:
:CUSTOM_ID: addwithobj-src-exclude
:END:
The idea is that this is roughly equivallent to:

#+begin_src js
with (obj) {
  src
}
#+end_src

There are a few differences though. For starters, assignments to
variables will always remain contained within the with block.

e.g.

#+begin_src js
var foo = 'foo'
with ({}) {
  foo = 'bar'
}
assert(foo === 'bar')// => This fails for compile time with but passes for native with

var obj = {foo: 'foo'}
with ({}) {
  foo = 'bar'
}
assert(obj.foo === 'bar')// => This fails for compile time with but passes for native with
#+end_src

It also makes everything be declared, so you can always do:

#+begin_src js
if (foo === undefined)
#+end_src

instead of

#+begin_src js
if (typeof foo === 'undefined')
#+end_src

This is not the case if foo is in =exclude=. If a variable is excluded,
we ignore it entirely. This is useful if you know a variable will be
global as it can lead to efficiency improvements.

It is also safe to use in strict mode (unlike =with=) and it minifies
properly (=with= disables virtually all minification).

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
MIT
