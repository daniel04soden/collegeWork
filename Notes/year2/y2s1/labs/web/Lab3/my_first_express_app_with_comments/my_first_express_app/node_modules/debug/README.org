* debug
:PROPERTIES:
:CUSTOM_ID: debug
:END:
[[https://travis-ci.org/visionmedia/debug][[[https://travis-ci.org/visionmedia/debug.svg?branch=master]]]]
[[https://coveralls.io/github/visionmedia/debug?branch=master][[[https://coveralls.io/repos/github/visionmedia/debug/badge.svg?branch=master]]]]
[[https://visionmedia-community-slackin.now.sh/][[[https://visionmedia-community-slackin.now.sh/badge.svg]]]]
[[#backers][[[https://opencollective.com/debug/backers/badge.svg]]]]
[[#sponsors][[[https://opencollective.com/debug/sponsors/badge.svg]]]]

A tiny node.js debugging utility modelled after node core's debugging
technique.

*Discussion around the V3 API is under way
[[https://github.com/visionmedia/debug/issues/370][here]]*

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
#+begin_src sh
$ npm install debug
#+end_src

** Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:
=debug= exposes a function; simply pass this function the name of your
module, and it will return a decorated version of =console.error= for
you to pass debug statements to. This will allow you to toggle the debug
output for different parts of your module as well as the module as a
whole.

Example /app.js/:

#+begin_src js
var debug = require('debug')('http')
  , http = require('http')
  , name = 'My App';

// fake app

debug('booting %s', name);

http.createServer(function(req, res){
  debug(req.method + ' ' + req.url);
  res.end('hello\n');
}).listen(3000, function(){
  debug('listening');
});

// fake worker of some kind

require('./worker');
#+end_src

Example /worker.js/:

#+begin_src js
var debug = require('debug')('worker');

setInterval(function(){
  debug('doing some work');
}, 1000);
#+end_src

The *DEBUG* environment variable is then used to enable these based on
space or comma-delimited names. Here are some examples:

#+caption: debug http and worker
[[http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png]]

#+caption: debug worker
[[http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png]]

**** Windows note
:PROPERTIES:
:CUSTOM_ID: windows-note
:END:
On Windows the environment variable is set using the =set= command.

#+begin_src cmd
set DEBUG=*,-not_this
#+end_src

Note that PowerShell uses different syntax to set environment variables.

#+begin_src cmd
$env:DEBUG = "*,-not_this"
#+end_src

Then, run the program to be debugged as usual.

** Millisecond diff
:PROPERTIES:
:CUSTOM_ID: millisecond-diff
:END:
When actively developing an application it can be useful to see when the
time spent between one =debug()= call and the next. Suppose for example
you invoke =debug()= before requesting a resource, and after as well,
the "+NNNms" will show you how much time was spent between calls.

[[http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png]]

When stdout is not a TTY, =Date#toUTCString()= is used, making it more
useful for logging the debug information as shown below:

[[http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png]]

** Conventions
:PROPERTIES:
:CUSTOM_ID: conventions
:END:
If you're using this in one or more of your libraries, you /should/ use
the name of your library so that developers may toggle debugging as
desired without guessing names. If you have more than one debuggers you
/should/ prefix them with your library name and use ":" to separate
features. For example "bodyParser" from Connect would then be
"connect:bodyParser".

** Wildcards
:PROPERTIES:
:CUSTOM_ID: wildcards
:END:
The =*= character may be used as a wildcard. Suppose for example your
library has debuggers named "connect:bodyParser", "connect:compress",
"connect:session", instead of listing all three with
=DEBUG=connect:bodyParser,connect:compress,connect:session=, you may
simply do =DEBUG=connect:*=, or to run everything using this module
simply use =DEBUG=*=.

You can also exclude specific debuggers by prefixing them with a "-"
character. For example, =DEBUG=*,-connect:*= would include all debuggers
except those starting with "connect:".

** Environment Variables
:PROPERTIES:
:CUSTOM_ID: environment-variables
:END:
When running through Node.js, you can set a few environment variables
that will change the behavior of the debug logging:

| Name                | Purpose                                           |
|---------------------+---------------------------------------------------|
| =DEBUG=             | Enables/disables specific debugging namespaces.   |
| =DEBUG_COLORS=      | Whether or not to use colors in the debug output. |
| =DEBUG_DEPTH=       | Object inspection depth.                          |
| =DEBUG_SHOW_HIDDEN= | Shows hidden properties on inspected objects.     |

*Note:* The environment variables beginning with =DEBUG_= end up being
converted into an Options object that gets used with =%o=/=%O=
formatters. See the Node.js documentation for
[[https://nodejs.org/api/util.html#util_util_inspect_object_options][=util.inspect()=]]
for the complete list.

** Formatters
:PROPERTIES:
:CUSTOM_ID: formatters
:END:
Debug uses
[[https://wikipedia.org/wiki/Printf_format_string][printf-style]]
formatting. Below are the officially supported formatters:

| Formatter | Representation                                                                            |
|-----------+-------------------------------------------------------------------------------------------|
| =%O=      | Pretty-print an Object on multiple lines.                                                 |
| =%o=      | Pretty-print an Object all on a single line.                                              |
| =%s=      | String.                                                                                   |
| =%d=      | Number (both integer and float).                                                          |
| =%j=      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |
| =%%=      | Single percent sign ('%'). This does not consume an argument.                             |

*** Custom formatters
:PROPERTIES:
:CUSTOM_ID: custom-formatters
:END:
You can add custom formatters by extending the =debug.formatters=
object. For example, if you wanted to add support for rendering a Buffer
as hex with =%h=, you could do something like:

#+begin_src js
const createDebug = require('debug')
createDebug.formatters.h = (v) => {
  return v.toString('hex')
}

// â€¦elsewhere
const debug = createDebug('foo')
debug('this is hex: %h', new Buffer('hello world'))
//   foo this is hex: 68656c6c6f20776f726c6421 +0ms
#+end_src

** Browser support
:PROPERTIES:
:CUSTOM_ID: browser-support
:END:
You can build a browser-ready script using
[[https://github.com/substack/node-browserify][browserify]], or just use
the [[https://wzrd.in/][browserify-as-a-service]]
[[https://wzrd.in/standalone/debug@latest][build]], if you don't want to
build it yourself.

Debug's enable state is currently persisted by =localStorage=. Consider
the situation shown below where you have =worker:a= and =worker:b=, and
wish to debug both. You can enable this using =localStorage.debug=:

#+begin_src js
localStorage.debug = 'worker:*'
#+end_src

And then refresh the page.

#+begin_src js
a = debug('worker:a');
b = debug('worker:b');

setInterval(function(){
  a('doing some work');
}, 1000);

setInterval(function(){
  b('doing some work');
}, 1200);
#+end_src

**** Web Inspector Colors
:PROPERTIES:
:CUSTOM_ID: web-inspector-colors
:END:
Colors are also enabled on "Web Inspectors" that understand the =%c=
formatting option. These are WebKit web inspectors, Firefox
([[https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/][since
version 31]]) and the Firebug plugin for Firefox (any version).

Colored output looks something like:

[[https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png]]

** Output streams
:PROPERTIES:
:CUSTOM_ID: output-streams
:END:
By default =debug= will log to stderr, however this can be configured
per-namespace by overriding the =log= method:

Example /stdout.js/:

#+begin_src js
var debug = require('debug');
var error = debug('app:error');

// by default stderr is used
error('goes to stderr!');

var log = debug('app:log');
// set this namespace to log via console.log
log.log = console.log.bind(console); // don't forget to bind to console!
log('goes to stdout');
error('still goes to stderr!');

// set all output to go via console.info
// overrides all per-namespace log settings
debug.log = console.info.bind(console);
error('now goes to stdout via console.info');
log('still goes to stdout, but via console.info now');
#+end_src

** Authors
:PROPERTIES:
:CUSTOM_ID: authors
:END:
- TJ Holowaychuk
- Nathan Rajlich
- Andrew Rhyne

** Backers
:PROPERTIES:
:CUSTOM_ID: backers
:END:
Support us with a monthly donation and help us continue our activities.
[[[https://opencollective.com/debug#backer][Become a backer]]]

** Sponsors
:PROPERTIES:
:CUSTOM_ID: sponsors
:END:
Become a sponsor and get your logo on our README on Github with a link
to your site. [[[https://opencollective.com/debug#sponsor][Become a
sponsor]]]

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
(The MIT License)

Copyright (c) 2014-2016 TJ Holowaychuk <tj@vision-media.ca>

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
