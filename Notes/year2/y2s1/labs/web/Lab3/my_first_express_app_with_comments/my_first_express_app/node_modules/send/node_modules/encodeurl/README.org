* encodeurl
:PROPERTIES:
:CUSTOM_ID: encodeurl
:END:
[[https://npmjs.org/package/encodeurl][[[https://img.shields.io/npm/v/encodeurl.svg]]]]
[[https://npmjs.org/package/encodeurl][[[https://img.shields.io/npm/dm/encodeurl.svg]]]]
[[https://nodejs.org/en/download][[[https://img.shields.io/node/v/encodeurl.svg]]]]
[[https://travis-ci.org/pillarjs/encodeurl][[[https://img.shields.io/travis/pillarjs/encodeurl.svg]]]]
[[https://coveralls.io/r/pillarjs/encodeurl?branch=master][[[https://img.shields.io/coveralls/pillarjs/encodeurl.svg]]]]

Encode a URL to a percent-encoded form, excluding already-encoded
sequences

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_src sh
$ npm install encodeurl
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
#+begin_src js
var encodeUrl = require('encodeurl')
#+end_src

*** encodeUrl(url)
:PROPERTIES:
:CUSTOM_ID: encodeurlurl
:END:
Encode a URL to a percent-encoded form, excluding already-encoded
sequences.

This function will take an already-encoded URL and encode all the
non-URL code points (as UTF-8 byte sequences). This function will not
encode the "%" character unless it is not part of a valid sequence
(=%20= will be left as-is, but =%foo= will be encoded as =%25foo=).

This encode is meant to be "safe" and does not throw errors. It will try
as hard as it can to properly encode the given URL, including replacing
any raw, unpaired surrogate pairs with the Unicode replacement character
prior to encoding.

This function is /similar/ to the intrinsic function =encodeURI=, except
it will not encode the =%= character if that is part of a valid
sequence, will not encode =[= and =]= (for IPv6 hostnames) and will
replace raw, unpaired surrogate pairs with the Unicode replacement
character (instead of throwing).

** Examples
:PROPERTIES:
:CUSTOM_ID: examples
:END:
*** Encode a URL containing user-controled data
:PROPERTIES:
:CUSTOM_ID: encode-a-url-containing-user-controled-data
:END:
#+begin_src js
var encodeUrl = require('encodeurl')
var escapeHtml = require('escape-html')

http.createServer(function onRequest (req, res) {
  // get encoded form of inbound url
  var url = encodeUrl(req.url)

  // create html message
  var body = '<p>Location ' + escapeHtml(url) + ' not found</p>'

  // send a 404
  res.statusCode = 404
  res.setHeader('Content-Type', 'text/html; charset=UTF-8')
  res.setHeader('Content-Length', String(Buffer.byteLength(body, 'utf-8')))
  res.end(body, 'utf-8')
})
#+end_src

*** Encode a URL for use in a header field
:PROPERTIES:
:CUSTOM_ID: encode-a-url-for-use-in-a-header-field
:END:
#+begin_src js
var encodeUrl = require('encodeurl')
var escapeHtml = require('escape-html')
var url = require('url')

http.createServer(function onRequest (req, res) {
  // parse inbound url
  var href = url.parse(req)

  // set new host for redirect
  href.host = 'localhost'
  href.protocol = 'https:'
  href.slashes = true

  // create location header
  var location = encodeUrl(url.format(href))

  // create html message
  var body = '<p>Redirecting to new site: ' + escapeHtml(location) + '</p>'

  // send a 301
  res.statusCode = 301
  res.setHeader('Content-Type', 'text/html; charset=UTF-8')
  res.setHeader('Content-Length', String(Buffer.byteLength(body, 'utf-8')))
  res.setHeader('Location', location)
  res.end(body, 'utf-8')
})
#+end_src

** Testing
:PROPERTIES:
:CUSTOM_ID: testing
:END:
#+begin_src sh
$ npm test
$ npm run lint
#+end_src

** References
:PROPERTIES:
:CUSTOM_ID: references
:END:
- [[https://tools.ietf.org/html/rfc3986][RFC 3986: Uniform Resource
  Identifier (URI): Generic Syntax]]
- [[https://url.spec.whatwg.org/][WHATWG URL Living Standard]]

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
