* Commander.js
:PROPERTIES:
:CUSTOM_ID: commander.js
:END:
[[http://travis-ci.org/tj/commander.js][[[https://api.travis-ci.org/tj/commander.js.svg]]]]
[[https://www.npmjs.org/package/commander][[[http://img.shields.io/npm/v/commander.svg?style=flat]]]]
[[https://www.npmjs.org/package/commander][[[https://img.shields.io/npm/dm/commander.svg?style=flat]]]]

The complete solution for [[http://nodejs.org][node.js]] command-line
interfaces, inspired by Ruby's
[[https://github.com/tj/commander][commander]].\\
[[http://tj.github.com/commander.js/][API documentation]]

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
#+begin_example
$ npm install commander
#+end_example

** Option parsing
:PROPERTIES:
:CUSTOM_ID: option-parsing
:END:
Options with commander are defined with the =.option()= method, also
serving as documentation for the options. The example below parses args
and options from =process.argv=, leaving remaining args as the
=program.args= array which were not consumed by options.

#+begin_src js
#!/usr/bin/env node

/**
 ,* Module dependencies.
 ,*/

var program = require('commander');

program
  .version('0.0.1')
  .option('-p, --peppers', 'Add peppers')
  .option('-P, --pineapple', 'Add pineapple')
  .option('-b, --bbq', 'Add bbq sauce')
  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')
  .parse(process.argv);

console.log('you ordered a pizza with:');
if (program.peppers) console.log('  - peppers');
if (program.pineapple) console.log('  - pineapple');
if (program.bbq) console.log('  - bbq');
console.log('  - %s cheese', program.cheese);
#+end_src

Short flags may be passed as a single arg, for example =-abc= is
equivalent to =-a -b -c=. Multi-word options such as "--template-engine"
are camel-cased, becoming =program.templateEngine= etc.

** Coercion
:PROPERTIES:
:CUSTOM_ID: coercion
:END:
#+begin_src js
function range(val) {
  return val.split('..').map(Number);
}

function list(val) {
  return val.split(',');
}

function collect(val, memo) {
  memo.push(val);
  return memo;
}

function increaseVerbosity(v, total) {
  return total + 1;
}

program
  .version('0.0.1')
  .usage('[options] <file ...>')
  .option('-i, --integer <n>', 'An integer argument', parseInt)
  .option('-f, --float <n>', 'A float argument', parseFloat)
  .option('-r, --range <a>..<b>', 'A range', range)
  .option('-l, --list <items>', 'A list', list)
  .option('-o, --optional [value]', 'An optional value')
  .option('-c, --collect [value]', 'A repeatable value', collect, [])
  .option('-v, --verbose', 'A value that can be increased', increaseVerbosity, 0)
  .parse(process.argv);

console.log(' int: %j', program.integer);
console.log(' float: %j', program.float);
console.log(' optional: %j', program.optional);
program.range = program.range || [];
console.log(' range: %j..%j', program.range[0], program.range[1]);
console.log(' list: %j', program.list);
console.log(' collect: %j', program.collect);
console.log(' verbosity: %j', program.verbose);
console.log(' args: %j', program.args);
#+end_src

** Variadic arguments
:PROPERTIES:
:CUSTOM_ID: variadic-arguments
:END:
The last argument of a command can be variadic, and only the last
argument. To make an argument variadic you have to append =...= to the
argument name. Here is an example:

#+begin_src js
#!/usr/bin/env node

/**
 ,* Module dependencies.
 ,*/

var program = require('commander');

program
  .version('0.0.1')
  .command('rmdir <dir> [otherDirs...]')
  .action(function (dir, otherDirs) {
    console.log('rmdir %s', dir);
    if (otherDirs) {
      otherDirs.forEach(function (oDir) {
        console.log('rmdir %s', oDir);
      });
    }
  });

program.parse(process.argv);
#+end_src

An =Array= is used for the value of a variadic argument. This applies to
=program.args= as well as the argument passed to your action as
demonstrated above.

** Git-style sub-commands
:PROPERTIES:
:CUSTOM_ID: git-style-sub-commands
:END:
#+begin_src js
// file: ./examples/pm
var program = require('..');

program
  .version('0.0.1')
  .command('install [name]', 'install one or more packages')
  .command('search [query]', 'search with optional query')
  .command('list', 'list packages installed')
  .parse(process.argv);
#+end_src

When =.command()= is invoked with a description argument, no
=.action(callback)= should be called to handle sub-commands, otherwise
there will be an error. This tells commander that you're going to use
separate executables for sub-commands, much like =git(1)= and other
popular tools.\\
The commander will try to find the executable script in *current
directory* with the name =scriptBasename-subcommand=, like =pm-install=,
=pm-search=.

** Automated --help
:PROPERTIES:
:CUSTOM_ID: automated-help
:END:
The help information is auto-generated based on the information
commander already knows about your program, so the following =--help=
info is for free:

#+begin_example
 $ ./examples/pizza --help

   Usage: pizza [options]

   An application for pizzas ordering

   Options:

     -h, --help           output usage information
     -V, --version        output the version number
     -p, --peppers        Add peppers
     -P, --pineapple      Add pineapple
     -b, --bbq            Add bbq sauce
     -c, --cheese <type>  Add the specified type of cheese [marble]
     -C, --no-cheese      You do not want any cheese
#+end_example

** Custom help
:PROPERTIES:
:CUSTOM_ID: custom-help
:END:
You can display arbitrary =-h, --help= information by listening for
"--help". Commander will automatically exit once you are done so that
the remainder of your program does not execute causing undesired
behaviours, for example in the following executable "stuff" will not
output when =--help= is used.

#+begin_src js
#!/usr/bin/env node

/**
 ,* Module dependencies.
 ,*/

var program = require('commander');

program
  .version('0.0.1')
  .option('-f, --foo', 'enable some foo')
  .option('-b, --bar', 'enable some bar')
  .option('-B, --baz', 'enable some baz');

// must be before .parse() since
// node's emit() is immediate

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ custom-help --help');
  console.log('    $ custom-help -h');
  console.log('');
});

program.parse(process.argv);

console.log('stuff');
#+end_src

Yields the following help output when =node script-name.js -h= or
=node script-name.js --help= are run:

#+begin_example

Usage: custom-help [options]

Options:

  -h, --help     output usage information
  -V, --version  output the version number
  -f, --foo      enable some foo
  -b, --bar      enable some bar
  -B, --baz      enable some baz

Examples:

  $ custom-help --help
  $ custom-help -h
#+end_example

** .outputHelp()
:PROPERTIES:
:CUSTOM_ID: outputhelp
:END:
Output help information without exiting.

** .help()
:PROPERTIES:
:CUSTOM_ID: help
:END:
Output help information and exit immediately.

** Examples
:PROPERTIES:
:CUSTOM_ID: examples
:END:
#+begin_src js
var program = require('commander');

program
  .version('0.0.1')
  .option('-C, --chdir <path>', 'change the working directory')
  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')
  .option('-T, --no-tests', 'ignore test hook')

program
  .command('setup [env]')
  .description('run setup commands for all envs')
  .option("-s, --setup_mode [mode]", "Which setup mode to use")
  .action(function(env, options){
    var mode = options.setup_mode || "normal";
    env = env || 'all';
    console.log('setup for %s env(s) with %s mode', env, mode);
  });

program
  .command('exec <cmd>')
  .alias('ex')
  .description('execute the given remote cmd')
  .option("-e, --exec_mode <mode>", "Which exec mode to use")
  .action(function(cmd, options){
    console.log('exec "%s" using %s mode', cmd, options.exec_mode);
  }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ deploy exec sequential');
    console.log('    $ deploy exec async');
    console.log();
  });

program
  .command('*')
  .action(function(env){
    console.log('deploying "%s"', env);
  });

program.parse(process.argv);
#+end_src

You can see more Demos in the
[[https://github.com/tj/commander.js/tree/master/examples][examples]]
directory.

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
(The MIT License)

Copyright (c) 2011 TJ Holowaychuk <tj@vision-media.ca>

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
