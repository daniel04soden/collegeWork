* range-parser
:PROPERTIES:
:CUSTOM_ID: range-parser
:END:
[[https://npmjs.org/package/range-parser][[[https://badgen.net/npm/v/range-parser]]]]
[[https://npmjs.org/package/range-parser][[[https://badgen.net/npm/dm/range-parser]]]]
[[https://nodejs.org/en/download][[[https://badgen.net/npm/node/range-parser]]]]
[[https://travis-ci.org/jshttp/range-parser][[[https://badgen.net/travis/jshttp/range-parser/master]]]]
[[https://coveralls.io/r/jshttp/range-parser?branch=master][[[https://badgen.net/coveralls/c/github/jshttp/range-parser/master]]]]

Range header field parser.

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_src sh
$ npm install range-parser
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:

#+begin_html
  <!-- eslint-disable no-unused-vars -->
#+end_html

#+begin_src js
var parseRange = require('range-parser')
#+end_src

*** parseRange(size, header, options)
:PROPERTIES:
:CUSTOM_ID: parserangesize-header-options
:END:
Parse the given =header= string where =size= is the maximum size of the
resource. An array of ranges will be returned or negative numbers
indicating an error parsing.

- =-2= signals a malformed header string
- =-1= signals an unsatisfiable range

#+begin_html
  <!-- eslint-disable no-undef -->
#+end_html

#+begin_src js
// parse header from request
var range = parseRange(size, req.headers.range)

// the type of the range
if (range.type === 'bytes') {
  // the ranges
  range.forEach(function (r) {
    // do something with r.start and r.end
  })
}
#+end_src

**** Options
:PROPERTIES:
:CUSTOM_ID: options
:END:
These properties are accepted in the options object.

***** combine
:PROPERTIES:
:CUSTOM_ID: combine
:END:
Specifies if overlapping & adjacent ranges should be combined, defaults
to =false=. When =true=, ranges will be combined and returned as if they
were specified that way in the header.

#+begin_html
  <!-- eslint-disable no-undef -->
#+end_html

#+begin_src js
parseRange(100, 'bytes=50-55,0-10,5-10,56-60', { combine: true })
// => [
//      { start: 0,  end: 10 },
//      { start: 50, end: 60 }
//    ]
#+end_src

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
