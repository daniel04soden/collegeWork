* serve-static
:PROPERTIES:
:CUSTOM_ID: serve-static
:END:
[[https://npmjs.org/package/serve-static][[[https://badgen.net/npm/v/serve-static]]]]
[[https://npmjs.org/package/serve-static][[[https://badgen.net/npm/dm/serve-static]]]]
[[https://github.com/expressjs/serve-static/actions/workflows/ci.yml][[[https://badgen.net/github/checks/expressjs/serve-static/master?label=linux]]]]
[[https://ci.appveyor.com/project/dougwilson/serve-static][[[https://badgen.net/appveyor/ci/dougwilson/serve-static/master?label=windows]]]]
[[https://coveralls.io/r/expressjs/serve-static?branch=master][[[https://badgen.net/coveralls/c/github/expressjs/serve-static/master]]]]

** Install
:PROPERTIES:
:CUSTOM_ID: install
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_src sh
$ npm install serve-static
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
#+begin_src js
var serveStatic = require('serve-static')
#+end_src

*** serveStatic(root, options)
:PROPERTIES:
:CUSTOM_ID: servestaticroot-options
:END:
Create a new middleware function to serve files from within a given root
directory. The file to serve will be determined by combining =req.url=
with the provided root directory. When a file is not found, instead of
sending a 404 response, this module will instead call =next()= to move
on to the next middleware, allowing for stacking and fall-backs.

**** Options
:PROPERTIES:
:CUSTOM_ID: options
:END:
***** acceptRanges
:PROPERTIES:
:CUSTOM_ID: acceptranges
:END:
Enable or disable accepting ranged requests, defaults to true. Disabling
this will not send =Accept-Ranges= and ignore the contents of the
=Range= request header.

***** cacheControl
:PROPERTIES:
:CUSTOM_ID: cachecontrol
:END:
Enable or disable setting =Cache-Control= response header, defaults to
true. Disabling this will ignore the =immutable= and =maxAge= options.

***** dotfiles
:PROPERTIES:
:CUSTOM_ID: dotfiles
:END:
Set how "dotfiles" are treated when encountered. A dotfile is a file or
directory that begins with a dot ("."). Note this check is done on the
path itself without checking if the path actually exists on the disk. If
=root= is specified, only the dotfiles above the root are checked
(i.e.Â the root itself can be within a dotfile when set to "deny").

- ='allow'= No special treatment for dotfiles.
- ='deny'= Deny a request for a dotfile and 403/=next()=.
- ='ignore'= Pretend like the dotfile does not exist and 404/=next()=.

The default value is similar to ='ignore'=, with the exception that this
default will not ignore the files within a directory that begins with a
dot.

***** etag
:PROPERTIES:
:CUSTOM_ID: etag
:END:
Enable or disable etag generation, defaults to true.

***** extensions
:PROPERTIES:
:CUSTOM_ID: extensions
:END:
Set file extension fallbacks. When set, if a file is not found, the
given extensions will be added to the file name and search for. The
first that exists will be served. Example: =['html', 'htm']=.

The default value is =false=.

***** fallthrough
:PROPERTIES:
:CUSTOM_ID: fallthrough
:END:
Set the middleware to have client errors fall-through as just unhandled
requests, otherwise forward a client error. The difference is that
client errors like a bad request or a request to a non-existent file
will cause this middleware to simply =next()= to your next middleware
when this value is =true=. When this value is =false=, these errors
(even 404s), will invoke =next(err)=.

Typically =true= is desired such that multiple physical directories can
be mapped to the same web address or for routes to fill in non-existent
files.

The value =false= can be used if this middleware is mounted at a path
that is designed to be strictly a single file system directory, which
allows for short-circuiting 404s for less overhead. This middleware will
also reply to all methods.

The default value is =true=.

***** immutable
:PROPERTIES:
:CUSTOM_ID: immutable
:END:
Enable or disable the =immutable= directive in the =Cache-Control=
response header, defaults to =false=. If set to =true=, the =maxAge=
option should also be specified to enable caching. The =immutable=
directive will prevent supported clients from making conditional
requests during the life of the =maxAge= option to check if the file has
changed.

***** index
:PROPERTIES:
:CUSTOM_ID: index
:END:
By default this module will send "index.html" files in response to a
request on a directory. To disable this set =false= or to supply a new
index pass a string or an array in preferred order.

***** lastModified
:PROPERTIES:
:CUSTOM_ID: lastmodified
:END:
Enable or disable =Last-Modified= header, defaults to true. Uses the
file system's last modified value.

***** maxAge
:PROPERTIES:
:CUSTOM_ID: maxage
:END:
Provide a max-age in milliseconds for http caching, defaults to 0. This
can also be a string accepted by the
[[https://www.npmjs.org/package/ms#readme][ms]] module.

***** redirect
:PROPERTIES:
:CUSTOM_ID: redirect
:END:
Redirect to trailing "/" when the pathname is a dir. Defaults to =true=.

***** setHeaders
:PROPERTIES:
:CUSTOM_ID: setheaders
:END:
Function to set custom headers on response. Alterations to the headers
need to occur synchronously. The function is called as
=fn(res, path, stat)=, where the arguments are:

- =res= the response object
- =path= the file path that is being sent
- =stat= the stat object of the file that is being sent

** Examples
:PROPERTIES:
:CUSTOM_ID: examples
:END:
*** Serve files with vanilla node.js http server
:PROPERTIES:
:CUSTOM_ID: serve-files-with-vanilla-node.js-http-server
:END:
#+begin_src js
var finalhandler = require('finalhandler')
var http = require('http')
var serveStatic = require('serve-static')

// Serve up public/ftp folder
var serve = serveStatic('public/ftp', { index: ['index.html', 'index.htm'] })

// Create server
var server = http.createServer(function onRequest (req, res) {
  serve(req, res, finalhandler(req, res))
})

// Listen
server.listen(3000)
#+end_src

*** Serve all files as downloads
:PROPERTIES:
:CUSTOM_ID: serve-all-files-as-downloads
:END:
#+begin_src js
var contentDisposition = require('content-disposition')
var finalhandler = require('finalhandler')
var http = require('http')
var serveStatic = require('serve-static')

// Serve up public/ftp folder
var serve = serveStatic('public/ftp', {
  index: false,
  setHeaders: setHeaders
})

// Set header to force download
function setHeaders (res, path) {
  res.setHeader('Content-Disposition', contentDisposition(path))
}

// Create server
var server = http.createServer(function onRequest (req, res) {
  serve(req, res, finalhandler(req, res))
})

// Listen
server.listen(3000)
#+end_src

*** Serving using express
:PROPERTIES:
:CUSTOM_ID: serving-using-express
:END:
**** Simple
:PROPERTIES:
:CUSTOM_ID: simple
:END:
This is a simple example of using Express.

#+begin_src js
var express = require('express')
var serveStatic = require('serve-static')

var app = express()

app.use(serveStatic('public/ftp', { index: ['default.html', 'default.htm'] }))
app.listen(3000)
#+end_src

**** Multiple roots
:PROPERTIES:
:CUSTOM_ID: multiple-roots
:END:
This example shows a simple way to search through multiple directories.
Files are searched for in =public-optimized/= first, then =public/=
second as a fallback.

#+begin_src js
var express = require('express')
var path = require('path')
var serveStatic = require('serve-static')

var app = express()

app.use(serveStatic(path.join(__dirname, 'public-optimized')))
app.use(serveStatic(path.join(__dirname, 'public')))
app.listen(3000)
#+end_src

**** Different settings for paths
:PROPERTIES:
:CUSTOM_ID: different-settings-for-paths
:END:
This example shows how to set a different max age depending on the
served file type. In this example, HTML files are not cached, while
everything else is for 1 day.

#+begin_src js
var express = require('express')
var path = require('path')
var serveStatic = require('serve-static')

var app = express()

app.use(serveStatic(path.join(__dirname, 'public'), {
  maxAge: '1d',
  setHeaders: setCustomCacheControl
}))

app.listen(3000)

function setCustomCacheControl (res, path) {
  if (serveStatic.mime.lookup(path) === 'text/html') {
    // Custom Cache-Control for HTML files
    res.setHeader('Cache-Control', 'public, max-age=0')
  }
}
#+end_src

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
