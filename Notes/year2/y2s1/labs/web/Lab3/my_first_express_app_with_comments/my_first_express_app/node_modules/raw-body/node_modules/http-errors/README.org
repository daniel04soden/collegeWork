* http-errors
:PROPERTIES:
:CUSTOM_ID: http-errors
:END:
[[https://npmjs.org/package/http-errors][[[https://badgen.net/npm/v/http-errors]]]]
[[https://nodejs.org/en/download][[[https://badgen.net/npm/dm/http-errors]]]]
[[https://nodejs.org/en/download][[[https://badgen.net/npm/node/http-errors]]]]
[[https://github.com/jshttp/http-errors/actions?query=workflow%3Aci][[[https://badgen.net/github/checks/jshttp/http-errors/master?label=ci]]]]
[[https://coveralls.io/r/jshttp/http-errors?branch=master][[[https://badgen.net/coveralls/c/github/jshttp/http-errors/master]]]]

Create HTTP errors for Express, Koa, Connect, etc. with ease.

** Install
:PROPERTIES:
:CUSTOM_ID: install
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_src console
$ npm install http-errors
#+end_src

** Example
:PROPERTIES:
:CUSTOM_ID: example
:END:
#+begin_src js
var createError = require('http-errors')
var express = require('express')
var app = express()

app.use(function (req, res, next) {
  if (!req.user) return next(createError(401, 'Please login to view this page.'))
  next()
})
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
This is the current API, currently extracted from Koa and subject to
change.

*** Error Properties
:PROPERTIES:
:CUSTOM_ID: error-properties
:END:
- =expose= - can be used to signal if =message= should be sent to the
  client, defaulting to =false= when =status= >= 500
- =headers= - can be an object of header names to values to be sent to
  the client, defaulting to =undefined=. When defined, the key names
  should all be lower-cased
- =message= - the traditional error message, which should be kept short
  and all single line
- =status= - the status code of the error, mirroring =statusCode= for
  general compatibility
- =statusCode= - the status code of the error, defaulting to =500=

*** createError([status], [message], [properties])
:PROPERTIES:
:CUSTOM_ID: createerrorstatus-message-properties
:END:
Create a new error object with the given message =msg=. The error object
inherits from =createError.HttpError=.

#+begin_src js
var err = createError(404, 'This video does not exist!')
#+end_src

- =status: 500= - the status code as a number
- =message= - the message of the error, defaulting to node's text for
  that status code.
- =properties= - custom properties to attach to the object

*** createError([status], [error], [properties])
:PROPERTIES:
:CUSTOM_ID: createerrorstatus-error-properties
:END:
Extend the given =error= object with =createError.HttpError= properties.
This will not alter the inheritance of the given =error= object, and the
modified =error= object is the return value.

#+begin_html
  <!-- eslint-disable no-redeclare -->
#+end_html

#+begin_src js
fs.readFile('foo.txt', function (err, buf) {
  if (err) {
    if (err.code === 'ENOENT') {
      var httpError = createError(404, err, { expose: false })
    } else {
      var httpError = createError(500, err)
    }
  }
})
#+end_src

- =status= - the status code as a number
- =error= - the error object to extend
- =properties= - custom properties to attach to the object

*** createError.isHttpError(val)
:PROPERTIES:
:CUSTOM_ID: createerror.ishttperrorval
:END:
Determine if the provided =val= is an =HttpError=. This will return
=true= if the error inherits from the =HttpError= constructor of this
module or matches the "duck type" for an error this module creates. All
outputs from the =createError= factory will return =true= for this
function, including if an non-=HttpError= was passed into the factory.

*** new createError[code || name]([msg]))
:PROPERTIES:
:CUSTOM_ID: new-createerrorcode-namemsg
:END:
Create a new error object with the given message =msg=. The error object
inherits from =createError.HttpError=.

#+begin_src js
var err = new createError.NotFound()
#+end_src

- =code= - the status code as a number
- =name= - the name of the error as a "bumpy case", i.e.Â =NotFound= or
  =InternalServerError=.

**** List of all constructors
:PROPERTIES:
:CUSTOM_ID: list-of-all-constructors
:END:
| Status Code | Constructor Name              |
|-------------+-------------------------------|
| 400         | BadRequest                    |
| 401         | Unauthorized                  |
| 402         | PaymentRequired               |
| 403         | Forbidden                     |
| 404         | NotFound                      |
| 405         | MethodNotAllowed              |
| 406         | NotAcceptable                 |
| 407         | ProxyAuthenticationRequired   |
| 408         | RequestTimeout                |
| 409         | Conflict                      |
| 410         | Gone                          |
| 411         | LengthRequired                |
| 412         | PreconditionFailed            |
| 413         | PayloadTooLarge               |
| 414         | URITooLong                    |
| 415         | UnsupportedMediaType          |
| 416         | RangeNotSatisfiable           |
| 417         | ExpectationFailed             |
| 418         | ImATeapot                     |
| 421         | MisdirectedRequest            |
| 422         | UnprocessableEntity           |
| 423         | Locked                        |
| 424         | FailedDependency              |
| 425         | TooEarly                      |
| 426         | UpgradeRequired               |
| 428         | PreconditionRequired          |
| 429         | TooManyRequests               |
| 431         | RequestHeaderFieldsTooLarge   |
| 451         | UnavailableForLegalReasons    |
| 500         | InternalServerError           |
| 501         | NotImplemented                |
| 502         | BadGateway                    |
| 503         | ServiceUnavailable            |
| 504         | GatewayTimeout                |
| 505         | HTTPVersionNotSupported       |
| 506         | VariantAlsoNegotiates         |
| 507         | InsufficientStorage           |
| 508         | LoopDetected                  |
| 509         | BandwidthLimitExceeded        |
| 510         | NotExtended                   |
| 511         | NetworkAuthenticationRequired |

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
