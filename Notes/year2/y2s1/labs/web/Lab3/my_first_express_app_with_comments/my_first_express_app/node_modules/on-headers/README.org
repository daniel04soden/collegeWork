* on-headers
:PROPERTIES:
:CUSTOM_ID: on-headers
:END:
[[https://npmjs.org/package/on-headers][[[https://badgen.net/npm/v/on-headers]]]]
[[https://npmjs.org/package/on-headers][[[https://badgen.net/npm/dm/on-headers]]]]
[[https://nodejs.org/en/download][[[https://badgen.net/npm/node/on-headers]]]]
[[https://travis-ci.org/jshttp/on-headers][[[https://badgen.net/travis/jshttp/on-headers/master]]]]
[[https://coveralls.io/r/jshttp/on-headers?branch=master][[[https://badgen.net/coveralls/c/github/jshttp/on-headers/master]]]]

Execute a listener when a response is about to write headers.

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_src sh
$ npm install on-headers
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:

#+begin_html
  <!-- eslint-disable no-unused-vars -->
#+end_html

#+begin_src js
var onHeaders = require('on-headers')
#+end_src

*** onHeaders(res, listener)
:PROPERTIES:
:CUSTOM_ID: onheadersres-listener
:END:
This will add the listener =listener= to fire when headers are emitted
for =res=. The listener is passed the =response= object as it's context
(=this=). Headers are considered to be emitted only once, right before
they are sent to the client.

When this is called multiple times on the same =res=, the =listener=s
are fired in the reverse order they were added.

** Examples
:PROPERTIES:
:CUSTOM_ID: examples
:END:
#+begin_src js
var http = require('http')
var onHeaders = require('on-headers')

http
  .createServer(onRequest)
  .listen(3000)

function addPoweredBy () {
  // set if not set by end of request
  if (!this.getHeader('X-Powered-By')) {
    this.setHeader('X-Powered-By', 'Node.js')
  }
}

function onRequest (req, res) {
  onHeaders(res, addPoweredBy)

  res.setHeader('Content-Type', 'text/plain')
  res.end('hello!')
}
#+end_src

** Testing
:PROPERTIES:
:CUSTOM_ID: testing
:END:
#+begin_src sh
$ npm test
#+end_src

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
