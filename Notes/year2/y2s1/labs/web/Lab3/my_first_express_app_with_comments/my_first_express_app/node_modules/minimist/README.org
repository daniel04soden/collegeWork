* minimist [[https://npmjs.org/package/minimist][[[https://versionbadg.es/minimistjs/minimist.svg]]]]
:PROPERTIES:
:CUSTOM_ID: minimist-version-badgenpm-version-svgpackage-url
:END:
[[https://github.com/minimistjs/minimist/actions][[[https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/minimistjs/minimist]]]]
[[https://app.codecov.io/gh/minimistjs/minimist/][[[https://codecov.io/gh/minimistjs/minimist/branch/main/graphs/badge.svg]]]]
[[file:LICENSE][[[https://img.shields.io/npm/l/minimist.svg]]]]
[[https://npm-stat.com/charts.html?package=minimist][[[https://img.shields.io/npm/dm/minimist.svg]]]]

[[https://npmjs.org/package/minimist][[[https://nodei.co/npm/minimist.png?downloads=true&stars=true]]]]

parse argument options

This module is the guts of optimist's argument parser without all the
fanciful decoration.

* example
:PROPERTIES:
:CUSTOM_ID: example
:END:
#+begin_src js
var argv = require('minimist')(process.argv.slice(2));
console.log(argv);
#+end_src

#+begin_example
$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }
#+end_example

#+begin_example
$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{
    _: ['foo', 'bar', 'baz'],
    x: 3,
    y: 4,
    n: 5,
    a: true,
    b: true,
    c: true,
    beep: 'boop'
}
#+end_example

* security
:PROPERTIES:
:CUSTOM_ID: security
:END:
Previous versions had a prototype pollution bug that could cause
privilege escalation in some circumstances when handling untrusted user
input.

Please use version 1.2.6 or later:

- https://security.snyk.io/vuln/SNYK-JS-MINIMIST-2429795 (version
  <=1.2.5)
- https://snyk.io/vuln/SNYK-JS-MINIMIST-559764 (version <=1.2.3)

* methods
:PROPERTIES:
:CUSTOM_ID: methods
:END:
#+begin_src js
var parseArgs = require('minimist')
#+end_src

** var argv = parseArgs(args, opts={})
:PROPERTIES:
:CUSTOM_ID: var-argv-parseargsargs-opts
:END:
Return an argument object =argv= populated with the array arguments from
=args=.

=argv._= contains all the arguments that didn't have an option
associated with them.

Numeric-looking arguments will be returned as numbers unless
=opts.string= or =opts.boolean= is set for that argument name.

Any arguments after ='--'= will not be parsed and will end up in
=argv._=.

options can be:

- =opts.string= - a string or array of strings argument names to always
  treat as strings

- =opts.boolean= - a boolean, string or array of strings to always treat
  as booleans. if =true= will treat all double hyphenated arguments
  without equal signs as boolean (e.g.Â affects =--foo=, not =-f= or
  =--foo=bar=)

- =opts.alias= - an object mapping string names to strings or arrays of
  string argument names to use as aliases

- =opts.default= - an object mapping string argument names to default
  values

- =opts.stopEarly= - when true, populate =argv._= with everything after
  the first non-option

- =opts['--']= - when true, populate =argv._= with everything before the
  =--= and =argv['--']= with everything after the =--=. Here's an
  example:

  #+begin_example
  > require('./')('one two three -- four five --six'.split(' '), { '--': true })
  {
    _: ['one', 'two', 'three'],
    '--': ['four', 'five', '--six']
  }
  #+end_example

  Note that with =opts['--']= set, parsing for arguments still stops
  after the =--=.

- =opts.unknown= - a function which is invoked with a command line
  parameter not defined in the =opts= configuration object. If the
  function returns =false=, the unknown option is not added to =argv=.

* install
:PROPERTIES:
:CUSTOM_ID: install
:END:
With [[https://npmjs.org][npm]] do:

#+begin_example
npm install minimist
#+end_example

* license
:PROPERTIES:
:CUSTOM_ID: license
:END:
MIT
