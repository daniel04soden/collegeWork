** Pure JS character encoding conversion [[https://travis-ci.org/ashtuchkin/iconv-lite][[[https://travis-ci.org/ashtuchkin/iconv-lite.svg?branch=master]]]]
:PROPERTIES:
:CUSTOM_ID: pure-js-character-encoding-conversion-build-status
:END:
- Doesn't need native code compilation. Works on Windows and in
  sandboxed environments like [[http://c9.io][Cloud9]].
- Used in popular projects like
  [[https://github.com/expressjs/body-parser][Express.js
  (body_parser)]], [[http://gruntjs.com/][Grunt]],
  [[http://www.nodemailer.com/][Nodemailer]],
  [[http://yeoman.io/][Yeoman]] and others.
- Faster than [[https://github.com/bnoordhuis/node-iconv][node-iconv]]
  (see below for performance comparison).
- Intuitive encode/decode API
- Streaming support for Node v0.10+
- [Deprecated] Can extend Node.js primitives (buffers, streams) to
  support all iconv-lite encodings.
- In-browser usage via
  [[https://github.com/substack/node-browserify][Browserify]] (~180k
  gzip compressed with Buffer shim included).
- Typescript
  [[https://github.com/ashtuchkin/iconv-lite/blob/master/lib/index.d.ts][type
  definition file]] included.
- React Native is supported (need to explicitly =npm install= two more
  modules: =buffer= and =stream=).
- License: MIT.

[[https://npmjs.org/packages/iconv-lite/][[[https://nodei.co/npm/iconv-lite.png?downloads=true&downloadRank=true]]]]

** Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:
*** Basic API
:PROPERTIES:
:CUSTOM_ID: basic-api
:END:
#+begin_src javascript
var iconv = require('iconv-lite');

// Convert from an encoded buffer to js string.
str = iconv.decode(Buffer.from([0x68, 0x65, 0x6c, 0x6c, 0x6f]), 'win1251');

// Convert from js string to an encoded buffer.
buf = iconv.encode("Sample input string", 'win1251');

// Check if encoding is supported
iconv.encodingExists("us-ascii")
#+end_src

*** Streaming API (Node v0.10+)
:PROPERTIES:
:CUSTOM_ID: streaming-api-node-v0.10
:END:
#+begin_src javascript

// Decode stream (from binary stream to js strings)
http.createServer(function(req, res) {
    var converterStream = iconv.decodeStream('win1251');
    req.pipe(converterStream);

    converterStream.on('data', function(str) {
        console.log(str); // Do something with decoded strings, chunk-by-chunk.
    });
});

// Convert encoding streaming example
fs.createReadStream('file-in-win1251.txt')
    .pipe(iconv.decodeStream('win1251'))
    .pipe(iconv.encodeStream('ucs2'))
    .pipe(fs.createWriteStream('file-in-ucs2.txt'));

// Sugar: all encode/decode streams have .collect(cb) method to accumulate data.
http.createServer(function(req, res) {
    req.pipe(iconv.decodeStream('win1251')).collect(function(err, body) {
        assert(typeof body == 'string');
        console.log(body); // full request body string
    });
});
#+end_src

*** [Deprecated] Extend Node.js own encodings
:PROPERTIES:
:CUSTOM_ID: deprecated-extend-node.js-own-encodings
:END:

#+begin_quote
NOTE: This doesn't work on latest Node versions. See
[[https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility][details]].
#+end_quote

#+begin_src javascript
// After this call all Node basic primitives will understand iconv-lite encodings.
iconv.extendNodeEncodings();

// Examples:
buf = new Buffer(str, 'win1251');
buf.write(str, 'gbk');
str = buf.toString('latin1');
assert(Buffer.isEncoding('iso-8859-15'));
Buffer.byteLength(str, 'us-ascii');

http.createServer(function(req, res) {
    req.setEncoding('big5');
    req.collect(function(err, body) {
        console.log(body);
    });
});

fs.createReadStream("file.txt", "shift_jis");

// External modules are also supported (if they use Node primitives, which they probably do).
request = require('request');
request({
    url: "http://github.com/", 
    encoding: "cp932"
});

// To remove extensions
iconv.undoExtendNodeEncodings();
#+end_src

** Supported encodings
:PROPERTIES:
:CUSTOM_ID: supported-encodings
:END:
- All node.js native encodings: utf8, ucs2 / utf16-le, ascii, binary,
  base64, hex.
- Additional unicode encodings: utf16, utf16-be, utf-7, utf-7-imap.
- All widespread singlebyte encodings: Windows 125x family, ISO-8859
  family, IBM/DOS codepages, Macintosh family, KOI8 family, all others
  supported by iconv library. Aliases like 'latin1', 'us-ascii' also
  supported.
- All widespread multibyte encodings: CP932, CP936, CP949, CP950,
  GB2312, GBK, GB18030, Big5, Shift_JIS, EUC-JP.

See
[[https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings][all
supported encodings on wiki]].

Most singlebyte encodings are generated automatically from
[[https://github.com/bnoordhuis/node-iconv][node-iconv]]. Thank you Ben
Noordhuis and libiconv authors!

Multibyte encodings are generated from
[[http://www.unicode.org/Public/MAPPINGS/][Unicode.org mappings]] and
[[http://encoding.spec.whatwg.org/][WHATWG Encoding Standard mappings]].
Thank you, respective authors!

** Encoding/decoding speed
:PROPERTIES:
:CUSTOM_ID: encodingdecoding-speed
:END:
Comparison with node-iconv module (1000x256kb, on MacBook Pro, Core
i5/2.6 GHz, Node v0.12.0). Note: your results may vary, so please always
check on your hardware.

#+begin_example
operation             iconv@2.1.4   iconv-lite@0.4.7
----------------------------------------------------------
encode('win1251')     ~96 Mb/s      ~320 Mb/s
decode('win1251')     ~95 Mb/s      ~246 Mb/s
#+end_example

** BOM handling
:PROPERTIES:
:CUSTOM_ID: bom-handling
:END:
- Decoding: BOM is stripped by default, unless overridden by passing
  =stripBOM: false= in options (f.ex.
  =iconv.decode(buf, enc, {stripBOM: false})=). A callback might also be
  given as a =stripBOM= parameter - it'll be called if BOM character was
  actually found.
- If you want to detect UTF-8 BOM when decoding other encodings, use
  [[https://github.com/danielgindi/node-autodetect-decoder-stream][node-autodetect-decoder-stream]]
  module.
- Encoding: No BOM added, unless overridden by =addBOM: true= option.

** UTF-16 Encodings
:PROPERTIES:
:CUSTOM_ID: utf-16-encodings
:END:
This library supports UTF-16LE, UTF-16BE and UTF-16 encodings. First two
are straightforward, but UTF-16 is trying to be smart about endianness
in the following ways: * Decoding: uses BOM and 'spaces heuristic' to
determine input endianness. Default is UTF-16LE, but can be overridden
with =defaultEncoding: 'utf-16be'= option. Strips BOM unless
=stripBOM: false=. * Encoding: uses UTF-16LE and writes BOM by default.
Use =addBOM: false= to override.

** Other notes
:PROPERTIES:
:CUSTOM_ID: other-notes
:END:
When decoding, be sure to supply a Buffer to decode() method, otherwise
[[https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding][bad
things usually happen]].\\
Untranslatable characters are set to � or ?. No transliteration is
currently supported.\\
Node versions 0.10.31 and 0.11.13 are buggy, don't use them (see #65,
​#77).

** Testing
:PROPERTIES:
:CUSTOM_ID: testing
:END:
#+begin_src sh
$ git clone git@github.com:ashtuchkin/iconv-lite.git
$ cd iconv-lite
$ npm install
$ npm test
    
$ # To view performance:
$ node test/performance.js

$ # To view test coverage:
$ npm run coverage
$ open coverage/lcov-report/index.html
#+end_src
