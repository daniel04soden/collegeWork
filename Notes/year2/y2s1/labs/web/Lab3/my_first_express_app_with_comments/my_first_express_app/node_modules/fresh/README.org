* fresh
:PROPERTIES:
:CUSTOM_ID: fresh
:END:
[[https://npmjs.org/package/fresh][[[https://img.shields.io/npm/v/fresh.svg]]]]
[[https://npmjs.org/package/fresh][[[https://img.shields.io/npm/dm/fresh.svg]]]]
[[https://nodejs.org/en/][[[https://img.shields.io/node/v/fresh.svg]]]]
[[https://travis-ci.org/jshttp/fresh][[[https://img.shields.io/travis/jshttp/fresh/master.svg]]]]
[[https://coveralls.io/r/jshttp/fresh?branch=master][[[https://img.shields.io/coveralls/jshttp/fresh/master.svg]]]]

HTTP response freshness testing

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_example
$ npm install fresh
#+end_example

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:

#+begin_html
  <!-- eslint-disable no-unused-vars -->
#+end_html

#+begin_src js
var fresh = require('fresh')
#+end_src

*** fresh(reqHeaders, resHeaders)
:PROPERTIES:
:CUSTOM_ID: freshreqheaders-resheaders
:END:
Check freshness of the response using request and response headers.

When the response is still "fresh" in the client's cache =true= is
returned, otherwise =false= is returned to indicate that the client
cache is now stale and the full response should be sent.

When a client sends the =Cache-Control: no-cache= request header to
indicate an end-to-end reload request, this module will return =false=
to make handling these requests transparent.

** Known Issues
:PROPERTIES:
:CUSTOM_ID: known-issues
:END:
This module is designed to only follow the HTTP specifications, not to
work-around all kinda of client bugs (especially since this module
typically does not recieve enough information to understand what the
client actually is).

There is a known issue that in certain versions of Safari, Safari will
incorrectly make a request that allows this module to validate freshness
of the resource even when Safari does not have a representation of the
resource in the cache. The module
[[https://www.npmjs.com/package/jumanji][jumanji]] can be used in an
Express application to work-around this issue and also provides links to
further reading on this Safari bug.

** Example
:PROPERTIES:
:CUSTOM_ID: example
:END:
*** API usage
:PROPERTIES:
:CUSTOM_ID: api-usage
:END:

#+begin_html
  <!-- eslint-disable no-redeclare, no-undef -->
#+end_html

#+begin_src js
var reqHeaders = { 'if-none-match': '"foo"' }
var resHeaders = { 'etag': '"bar"' }
fresh(reqHeaders, resHeaders)
// => false

var reqHeaders = { 'if-none-match': '"foo"' }
var resHeaders = { 'etag': '"foo"' }
fresh(reqHeaders, resHeaders)
// => true
#+end_src

*** Using with Node.js http server
:PROPERTIES:
:CUSTOM_ID: using-with-node.js-http-server
:END:
#+begin_src js
var fresh = require('fresh')
var http = require('http')

var server = http.createServer(function (req, res) {
  // perform server logic
  // ... including adding ETag / Last-Modified response headers

  if (isFresh(req, res)) {
    // client has a fresh copy of resource
    res.statusCode = 304
    res.end()
    return
  }

  // send the resource
  res.statusCode = 200
  res.end('hello, world!')
})

function isFresh (req, res) {
  return fresh(req.headers, {
    'etag': res.getHeader('ETag'),
    'last-modified': res.getHeader('Last-Modified')
  })
}

server.listen(3000)
#+end_src

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
