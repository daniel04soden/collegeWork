* basic-auth
:PROPERTIES:
:CUSTOM_ID: basic-auth
:END:
[[https://npmjs.org/package/basic-auth][[[https://badgen.net/npm/v/basic-auth]]]]
[[https://npmjs.org/package/basic-auth][[[https://badgen.net/npm/dm/basic-auth]]]]
[[https://nodejs.org/en/download][[[https://badgen.net/npm/node/basic-auth]]]]
[[https://travis-ci.org/jshttp/basic-auth][[[https://badgen.net/travis/jshttp/basic-auth/master]]]]
[[https://coveralls.io/r/jshttp/basic-auth?branch=master][[[https://badgen.net/coveralls/c/github/jshttp/basic-auth/master]]]]

Generic basic auth Authorization header field parser for whatever.

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_example
$ npm install basic-auth
#+end_example

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:

#+begin_html
  <!-- eslint-disable no-unused-vars -->
#+end_html

#+begin_src js
var auth = require('basic-auth')
#+end_src

*** auth(req)
:PROPERTIES:
:CUSTOM_ID: authreq
:END:
Get the basic auth credentials from the given request. The
=Authorization= header is parsed and if the header is invalid,
=undefined= is returned, otherwise an object with =name= and =pass=
properties.

*** auth.parse(string)
:PROPERTIES:
:CUSTOM_ID: auth.parsestring
:END:
Parse a basic auth authorization header string. This will return an
object with =name= and =pass= properties, or =undefined= if the string
is invalid.

** Example
:PROPERTIES:
:CUSTOM_ID: example
:END:
Pass a Node.js request object to the module export. If parsing fails
=undefined= is returned, otherwise an object with =.name= and =.pass=.

#+begin_html
  <!-- eslint-disable no-unused-vars, no-undef -->
#+end_html

#+begin_src js
var auth = require('basic-auth')
var user = auth(req)
// => { name: 'something', pass: 'whatever' }
#+end_src

A header string from any other location can also be parsed with
=auth.parse=, for example a =Proxy-Authorization= header:

#+begin_html
  <!-- eslint-disable no-unused-vars, no-undef -->
#+end_html

#+begin_src js
var auth = require('basic-auth')
var user = auth.parse(req.getHeader('Proxy-Authorization'))
#+end_src

*** With vanilla node.js http server
:PROPERTIES:
:CUSTOM_ID: with-vanilla-node.js-http-server
:END:
#+begin_src js
var http = require('http')
var auth = require('basic-auth')
var compare = require('tsscmp')

// Create server
var server = http.createServer(function (req, res) {
  var credentials = auth(req)

  // Check credentials
  // The "check" function will typically be against your user store
  if (!credentials || !check(credentials.name, credentials.pass)) {
    res.statusCode = 401
    res.setHeader('WWW-Authenticate', 'Basic realm="example"')
    res.end('Access denied')
  } else {
    res.end('Access granted')
  }
})

// Basic function to validate credentials for example
function check (name, pass) {
  var valid = true

  // Simple method to prevent short-circut and use timing-safe compare
  valid = compare(name, 'john') && valid
  valid = compare(pass, 'secret') && valid

  return valid
}

// Listen
server.listen(3000)
#+end_src

* License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
