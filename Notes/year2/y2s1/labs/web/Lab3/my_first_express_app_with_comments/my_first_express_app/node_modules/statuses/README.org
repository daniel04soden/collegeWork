* Statuses
:PROPERTIES:
:CUSTOM_ID: statuses
:END:
[[https://npmjs.org/package/statuses][[[https://img.shields.io/npm/v/statuses.svg]]]]
[[https://npmjs.org/package/statuses][[[https://img.shields.io/npm/dm/statuses.svg]]]]
[[https://nodejs.org/en/download][[[https://img.shields.io/node/v/statuses.svg]]]]
[[https://travis-ci.org/jshttp/statuses][[[https://img.shields.io/travis/jshttp/statuses.svg]]]]
[[https://coveralls.io/r/jshttp/statuses?branch=master][[[https://img.shields.io/coveralls/jshttp/statuses.svg]]]]

HTTP status utility for node.

This module provides a list of status codes and messages sourced from a
few different projects:

- The
  [[https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml][IANA
  Status Code Registry]]
- The [[https://nodejs.org/][Node.js project]]
- The [[https://www.nginx.com/][NGINX project]]
- The [[https://httpd.apache.org/][Apache HTTP Server project]]

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_src sh
$ npm install statuses
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:

#+begin_html
  <!-- eslint-disable no-unused-vars -->
#+end_html

#+begin_src js
var status = require('statuses')
#+end_src

*** var code = status(Integer || String)
:PROPERTIES:
:CUSTOM_ID: var-code-statusinteger-string
:END:
If =Integer= or =String= is a valid HTTP code or status message, then
the appropriate =code= will be returned. Otherwise, an error will be
thrown.

#+begin_html
  <!-- eslint-disable no-undef -->
#+end_html

#+begin_src js
status(403) // => 403
status('403') // => 403
status('forbidden') // => 403
status('Forbidden') // => 403
status(306) // throws, as it's not supported by node.js
#+end_src

*** status.STATUS_CODES
:PROPERTIES:
:CUSTOM_ID: status.status_codes
:END:
Returns an object which maps status codes to status messages, in the
same format as the
[[https://nodejs.org/dist/latest/docs/api/http.html#http_http_status_codes][Node.js
http module]].

*** status.codes
:PROPERTIES:
:CUSTOM_ID: status.codes
:END:
Returns an array of all the status codes as =Integer=s.

*** var msg = status[code]
:PROPERTIES:
:CUSTOM_ID: var-msg-statuscode
:END:
Map of =code= to =status message=. =undefined= for invalid =code=s.

#+begin_html
  <!-- eslint-disable no-undef, no-unused-expressions -->
#+end_html

#+begin_src js
status[404] // => 'Not Found'
#+end_src

*** var code = status[msg]
:PROPERTIES:
:CUSTOM_ID: var-code-statusmsg
:END:
Map of =status message= to =code=. =msg= can either be title-cased or
lower-cased. =undefined= for invalid =status message=s.

#+begin_html
  <!-- eslint-disable no-undef, no-unused-expressions -->
#+end_html

#+begin_src js
status['not found'] // => 404
status['Not Found'] // => 404
#+end_src

*** status.redirect[code]
:PROPERTIES:
:CUSTOM_ID: status.redirectcode
:END:
Returns =true= if a status code is a valid redirect status.

#+begin_html
  <!-- eslint-disable no-undef, no-unused-expressions -->
#+end_html

#+begin_src js
status.redirect[200] // => undefined
status.redirect[301] // => true
#+end_src

*** status.empty[code]
:PROPERTIES:
:CUSTOM_ID: status.emptycode
:END:
Returns =true= if a status code expects an empty body.

#+begin_html
  <!-- eslint-disable no-undef, no-unused-expressions -->
#+end_html

#+begin_src js
status.empty[200] // => undefined
status.empty[204] // => true
status.empty[304] // => true
#+end_src

*** status.retry[code]
:PROPERTIES:
:CUSTOM_ID: status.retrycode
:END:
Returns =true= if you should retry the rest.

#+begin_html
  <!-- eslint-disable no-undef, no-unused-expressions -->
#+end_html

#+begin_src js
status.retry[501] // => undefined
status.retry[503] // => true
#+end_src
