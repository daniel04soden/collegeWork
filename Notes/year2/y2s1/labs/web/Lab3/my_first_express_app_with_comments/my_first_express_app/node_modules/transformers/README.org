[[https://travis-ci.org/ForbesLindesay/transformers][[[https://travis-ci.org/ForbesLindesay/transformers.png?branch=master]]]]
​# transformers

String/Data transformations for use in templating libraries, static site
generators and web frameworks. This gathers the most useful
transformations you can apply to text or data into one library with a
consistent API. Transformations can be pretty much anything but most are
either compilers or templating engines.

** Supported transforms
:PROPERTIES:
:CUSTOM_ID: supported-transforms
:END:
To use each of these transforms you will also need to install the
associated npm module for that transformer.

*** Template engines
:PROPERTIES:
:CUSTOM_ID: template-engines
:END:
- [[http://documentup.com/soywiz/atpl.js][atpl]] - Compatible with twig
  templates
- [[http://documentup.com/gradus/coffeecup][coffeecup]] - pure
  coffee-script templates (fork of coffeekup)
- [[http://documentup.com/olado/doT][dot]]
  [[https://github.com/Katahdin/dot-packer][(website)]] - focused on
  speed
- [[http://documentup.com/akdubya/dustjs][dust]]
  [[http://akdubya.github.com/dustjs/][(website)]] - asyncronous
  templates
- [[http://documentup.com/sstephenson/eco][eco]] - Embedded CoffeeScript
  templates
- [[http://documentup.com/baryshev/ect][ect]]
  [[http://ectjs.com/][(website)]] - Embedded CoffeeScript templates
- [[http://documentup.com/visionmedia/ejs][ejs]] - Embedded JavaScript
  templates
- [[http://documentup.com/visionmedia/haml.js][haml]]
  [[http://haml-lang.com/][(website)]] - dry indented markup
- [[http://documentup.com/netzpirat/haml-coffee/][haml-coffee]]
  [[http://haml-lang.com/][(website)]] - haml with embedded CoffeeScript
- [[http://documentup.com/wycats/handlebars.js/][handlebars]]
  [[http://handlebarsjs.com/][(website)]] - extension of mustache
  templates
- [[http://documentup.com/twitter/hogan.js][hogan]]
  [[http://twitter.github.com/hogan.js/][(website)]] - Mustache
  templates
- [[http://documentup.com/visionmedia/jade][jade]]
  [[http://jade-lang.com/][(website)]] - robust, elegant, feature rich
  template engine
- [[http://documentup.com/shinetech/jazz][jazz]]
- [[http://documentup.com/kof/jqtpl][jqtpl]]
  [[http://api.jquery.com/category/plugins/templates/][(website)]] -
  extensible logic-less templates
- [[http://documentup.com/baryshev/just][JUST]] - EJS style template
  with some special syntax for layouts/partials etc.
- [[http://documentup.com/chjj/liquor][liquor]] - extended EJS with
  significant white space
- [[http://documentup.com/janl/mustache.js][mustache]] - logic less
  templates
- [[http://documentup.com/jepso/QEJS][QEJS]] - Promises + EJS for async
  templating
- [[http://documentup.com/paularmstrong/swig][swig]]
  [[http://paularmstrong.github.com/swig/][(website)]] - Django-like
  templating engine
- [[http://documentup.com/archan937/templayed.js/][templayed]]
  [[http://archan937.github.com/templayed.js/][(website)]] - Mustache
  focused on performance
- [[http://documentup.com/malgorithms/toffee][toffee]] - templating
  language based on coffeescript
- [[http://documentup.com/documentcloud/underscore][underscore]]
  [[http://documentcloud.github.com/underscore/][(website)]]
- [[http://documentup.com/jeremyruppel/walrus][walrus]] - A bolder kind
  of mustache
- [[http://documentup.com/gsf/whiskers.js/tree/][whiskers]] - logic-less
  focused on readability

*** Stylesheet Languages
:PROPERTIES:
:CUSTOM_ID: stylesheet-languages
:END:
- [[http://documentup.com/cloudhead/less.js][less]]
  [[http://lesscss.org/][(website)]] - LESS extends CSS with dynamic
  behavior such as variables, mixins, operations and functions.
- [[http://documentup.com/learnboost/stylus][stylus]]
  [[http://learnboost.github.com/stylus/][(website)]] - revolutionary
  CSS generator making braces optional
- [[http://documentup.com/visionmedia/sass.js][sass]]
  [[http://sass-lang.com/][(website)]] - Sassy CSS

*** Minifiers
:PROPERTIES:
:CUSTOM_ID: minifiers
:END:
- [[http://documentup.com/mishoo/UglifyJS2][uglify-js]] - No need to
  install anything, just minifies/beautifies JavaScript
- [[https://github.com/visionmedia/css][uglify-css]] - No need to
  install anything, just minifies/beautifies CSS
- ugilify-json - No need to install anything, just minifies/beautifies
  JSON

*** Other
:PROPERTIES:
:CUSTOM_ID: other
:END:
- cdata - No need to install anything, just wraps input as
  =<![CDATA[${INPUT_STRING]]>= with the standard escape for =]]>=
  (=]]]]><![CDATA[>=).
- cdata-js - as =cdata=, but with surrounding comments suitable for
  inclusion into a HTML/JavaScript =<script>= block:
  =//<![CDATA[\n${INPUT_STRING\n//]]>=.
- cdata-css - as =cdata=, but with surrounding comments suitable for
  inclusion into a HTML/CSS =<style>= block:
  =/*<![CDATA[*/\n${INPUT_STRING\n/*]]>*/=.
- verbatim - No need to install anything, acts as a verbatim passthrough
  =${INPUT_STRING}=
- [[http://coffeescript.org/][coffee-script]] -
  =npm install coffee-script=
- [[https://github.com/bevry/cson][cson]] - coffee-script based JSON
  format
- markdown - You can use =marked=, =supermarked=, =markdown-js= or
  =markdown=
- [[http://documentup.com/component/component][component-js]]
  [[http://component.io][(website)]] - =npm install component-builder=
  options: ={development: false}=
- [[http://documentup.com/component/component][component-css]]
  [[http://component.io][(website)]] - =npm install component-builder=
  options: ={development: false}=
- [[http://documentup.com/donpark/html2jade][html2jade]]
  [[http://html2jade.aaron-powell.com/][(website)]] -
  =npm install html2jade= - Converts HTML back into jade

Pull requests to add more transforms will always be accepted providing
they are open-source, come with unit tests, and don't cause any of the
tests to fail.

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
The exported object =transformers= is a collection of named
transformers. To access an individual transformer just do:

#+begin_src javascript
var transformer = require('transformers')['transformer-name']
#+end_src

*** Transformer
:PROPERTIES:
:CUSTOM_ID: transformer
:END:
The following options are given special meaning by =transformers=:

- =filename= is set by transformers automatically if using the
  =renderFile= APIs. It is used if =cache= is enabled.
- =cache= if true, the template function will be cached where possible
  (templates are still updated if you provide new options, so this can
  be used in most live applications).
- =sudoSync= used internally to put some asyncronous transformers into
  "sudo syncronous" mode. Don't touch this.
- =minify= if set to true on a transformer that isn't a minifier, it
  will cause the output to be minified.
  e.g. =coffeeScript.renderSync(str, {minify: true})= will result in
  minified JavaScript.

**** Transformer.engines
:PROPERTIES:
:CUSTOM_ID: transformer.engines
:END:
Returns an array of engines that can be used to power this transformer.
The first of these that's installed will be used for the transformation.

To enable a transformation just take =[engine] = Transformer.engines[0]=
and then do =npm install [engine]=. If =[engine]= is =.= there is no
need to install an engine from npm to use the transformer.

**** Transformer.render(str, options, cb)
:PROPERTIES:
:CUSTOM_ID: transformer.renderstr-options-cb
:END:
Tranform the string =str= using the =Transformer= with the provided
options and call the callback =cb(err, res)=.

If no =cb= is provided, this method returns a
[[http://promises-aplus.github.com/promises-spec/][promises/A+]]
promise.

**** Transformer.renderSync(str, options)
:PROPERTIES:
:CUSTOM_ID: transformer.rendersyncstr-options
:END:
Synchronous version of =Transformer.render=

**** Transformer.renderFile(filename, options, cb)
:PROPERTIES:
:CUSTOM_ID: transformer.renderfilefilename-options-cb
:END:
Reads the file at filename into =str= and sets
=options.filename = filename= then calls
=Transform.render(str, options, cb)=.

If no =cb= is provided, this method returns a
[[http://promises-aplus.github.com/promises-spec/][promises/A+]]
promise.

**** Tranformer.renderFileSync(filename, options)
:PROPERTIES:
:CUSTOM_ID: tranformer.renderfilesyncfilename-options
:END:
Synchronous version of =Tranformer.renderFile=

**** Transformer.outputFormat
:PROPERTIES:
:CUSTOM_ID: transformer.outputformat
:END:
A string, one of:

- ='xml'=
- ='css'=
- ='js'=
- ='json'=
- ='text'=

Adding to this list will *not* result in a major version change, so you
should handle unexpected types gracefully (I'd suggest default to
assuming ='text'=).

**** Transformer.sync
:PROPERTIES:
:CUSTOM_ID: transformer.sync
:END:
=true= if the transformer can be used syncronously, =false= otherwise.

** Libraries that don't work synchronously
:PROPERTIES:
:CUSTOM_ID: libraries-that-dont-work-synchronously
:END:
The following transformations will always throw an exception if you
attempt to run them synchronously:

1. dust
2. qejs
3. html2jade

The following transformations sometimes throw an exception if run
syncronously, typically they only throw an exception if you are doing
something like including another file. If you are not doing the things
that cause them to fail then they are consistently safe to use
syncronously.

- jade (only when using =then-jade= instead of =jade=)
- less (when =@import= is used with a url instead of a filename)
- jazz (When one of the functions passed as locals is asyncronous)

The following libraries look like they might sometimes throw exceptions
when used syncronously (if you read the source) but they never actually
do so:

- just
- ect
- stylus
