* raw-body
:PROPERTIES:
:CUSTOM_ID: raw-body
:END:
[[https://npmjs.org/package/raw-body][[[https://img.shields.io/npm/v/raw-body.svg]]]]
[[https://npmjs.org/package/raw-body][[[https://img.shields.io/npm/dm/raw-body.svg]]]]
[[https://nodejs.org/en/download/][[[https://img.shields.io/node/v/raw-body.svg]]]]
[[https://github.com/jshttp/stream-utils/raw-body?query=workflow%3Aci][[[https://img.shields.io/github/actions/workflow/status/stream-utils/raw-body/ci.yml?branch=master&label=ci]]]]
[[https://coveralls.io/r/stream-utils/raw-body?branch=master][[[https://img.shields.io/coveralls/stream-utils/raw-body/master.svg]]]]

Gets the entire buffer of a stream either as a =Buffer= or a string.
Validates the stream's length against an expected length and maximum
limit. Ideal for parsing request bodies.

** Install
:PROPERTIES:
:CUSTOM_ID: install
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_src sh
$ npm install raw-body
#+end_src

*** TypeScript
:PROPERTIES:
:CUSTOM_ID: typescript
:END:
This module includes a [[https://www.typescriptlang.org/][TypeScript]]
declaration file to enable auto complete in compatible editors and type
information for TypeScript projects. This module depends on the Node.js
types, so install =@types/node=:

#+begin_src sh
$ npm install @types/node
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
#+begin_src js
var getRawBody = require('raw-body')
#+end_src

*** getRawBody(stream, [options], [callback])
:PROPERTIES:
:CUSTOM_ID: getrawbodystream-options-callback
:END:
*Returns a promise if no callback specified and global =Promise=
exists.*

Options:

- =length= - The length of the stream. If the contents of the stream do
  not add up to this length, an =400= error code is returned.
- =limit= - The byte limit of the body. This is the number of bytes or
  any string format supported by
  [[https://www.npmjs.com/package/bytes][bytes]], for example =1000=,
  ='500kb'= or ='3mb'=. If the body ends up being larger than this
  limit, a =413= error code is returned.
- =encoding= - The encoding to use to decode the body into a string. By
  default, a =Buffer= instance will be returned when no encoding is
  specified. Most likely, you want =utf-8=, so setting =encoding= to
  =true= will decode as =utf-8=. You can use any type of encoding
  supported by
  [[https://www.npmjs.org/package/iconv-lite#readme][iconv-lite]].

You can also pass a string in place of options to just specify the
encoding.

If an error occurs, the stream will be paused, everything unpiped, and
you are responsible for correctly disposing the stream. For HTTP
requests, you may need to finish consuming the stream if you want to
keep the socket open for future requests. For streams that use file
descriptors, you should =stream.destroy()= or =stream.close()= to
prevent leaks.

** Errors
:PROPERTIES:
:CUSTOM_ID: errors
:END:
This module creates errors depending on the error condition during
reading. The error may be an error from the underlying Node.js
implementation, but is otherwise an error created by this module, which
has the following attributes:

- =limit= - the limit in bytes
- =length= and =expected= - the expected length of the stream
- =received= - the received bytes
- =encoding= - the invalid encoding
- =status= and =statusCode= - the corresponding status code for the
  error
- =type= - the error type

*** Types
:PROPERTIES:
:CUSTOM_ID: types
:END:
The errors from this module have a =type= property which allows for the
programmatic determination of the type of error returned.

**** encoding.unsupported
:PROPERTIES:
:CUSTOM_ID: encoding.unsupported
:END:
This error will occur when the =encoding= option is specified, but the
value does not map to an encoding supported by the
[[https://www.npmjs.org/package/iconv-lite#readme][iconv-lite]] module.

**** entity.too.large
:PROPERTIES:
:CUSTOM_ID: entity.too.large
:END:
This error will occur when the =limit= option is specified, but the
stream has an entity that is larger.

**** request.aborted
:PROPERTIES:
:CUSTOM_ID: request.aborted
:END:
This error will occur when the request stream is aborted by the client
before reading the body has finished.

**** request.size.invalid
:PROPERTIES:
:CUSTOM_ID: request.size.invalid
:END:
This error will occur when the =length= option is specified, but the
stream has emitted more bytes.

**** stream.encoding.set
:PROPERTIES:
:CUSTOM_ID: stream.encoding.set
:END:
This error will occur when the given stream has an encoding set on it,
making it a decoded stream. The stream should not have an encoding set
and is expected to emit =Buffer= objects.

**** stream.not.readable
:PROPERTIES:
:CUSTOM_ID: stream.not.readable
:END:
This error will occur when the given stream is not readable.

** Examples
:PROPERTIES:
:CUSTOM_ID: examples
:END:
*** Simple Express example
:PROPERTIES:
:CUSTOM_ID: simple-express-example
:END:
#+begin_src js
var contentType = require('content-type')
var express = require('express')
var getRawBody = require('raw-body')

var app = express()

app.use(function (req, res, next) {
  getRawBody(req, {
    length: req.headers['content-length'],
    limit: '1mb',
    encoding: contentType.parse(req).parameters.charset
  }, function (err, string) {
    if (err) return next(err)
    req.text = string
    next()
  })
})

// now access req.text
#+end_src

*** Simple Koa example
:PROPERTIES:
:CUSTOM_ID: simple-koa-example
:END:
#+begin_src js
var contentType = require('content-type')
var getRawBody = require('raw-body')
var koa = require('koa')

var app = koa()

app.use(function * (next) {
  this.text = yield getRawBody(this.req, {
    length: this.req.headers['content-length'],
    limit: '1mb',
    encoding: contentType.parse(this.req).parameters.charset
  })
  yield next
})

// now access this.text
#+end_src

*** Using as a promise
:PROPERTIES:
:CUSTOM_ID: using-as-a-promise
:END:
To use this library as a promise, simply omit the =callback= and a
promise is returned, provided that a global =Promise= is defined.

#+begin_src js
var getRawBody = require('raw-body')
var http = require('http')

var server = http.createServer(function (req, res) {
  getRawBody(req)
    .then(function (buf) {
      res.statusCode = 200
      res.end(buf.length + ' bytes submitted')
    })
    .catch(function (err) {
      res.statusCode = 500
      res.end(err.message)
    })
})

server.listen(3000)
#+end_src

*** Using with TypeScript
:PROPERTIES:
:CUSTOM_ID: using-with-typescript
:END:
#+begin_src ts
import * as getRawBody from 'raw-body';
import * as http from 'http';

const server = http.createServer((req, res) => {
  getRawBody(req)
  .then((buf) => {
    res.statusCode = 200;
    res.end(buf.length + ' bytes submitted');
  })
  .catch((err) => {
    res.statusCode = err.statusCode;
    res.end(err.message);
  });
});

server.listen(3000);
#+end_src

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
