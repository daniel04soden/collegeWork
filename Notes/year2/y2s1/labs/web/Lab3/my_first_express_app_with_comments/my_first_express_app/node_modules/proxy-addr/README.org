* proxy-addr
:PROPERTIES:
:CUSTOM_ID: proxy-addr
:END:
[[https://npmjs.org/package/proxy-addr][[[https://badgen.net/npm/v/proxy-addr]]]]
[[https://npmjs.org/package/proxy-addr][[[https://badgen.net/npm/dm/proxy-addr]]]]
[[https://nodejs.org/en/download][[[https://badgen.net/npm/node/proxy-addr]]]]
[[https://github.com/jshttp/proxy-addr/actions?query=workflow%3Aci][[[https://badgen.net/github/checks/jshttp/proxy-addr/master?label=ci]]]]
[[https://coveralls.io/r/jshttp/proxy-addr?branch=master][[[https://badgen.net/coveralls/c/github/jshttp/proxy-addr/master]]]]

Determine address of proxied request

** Install
:PROPERTIES:
:CUSTOM_ID: install
:END:
This is a [[https://nodejs.org/en/][Node.js]] module available through
the [[https://www.npmjs.com/][npm registry]]. Installation is done using
the
[[https://docs.npmjs.com/getting-started/installing-npm-packages-locally][=npm install=
command]]:

#+begin_src sh
$ npm install proxy-addr
#+end_src

** API
:PROPERTIES:
:CUSTOM_ID: api
:END:
#+begin_src js
var proxyaddr = require('proxy-addr')
#+end_src

*** proxyaddr(req, trust)
:PROPERTIES:
:CUSTOM_ID: proxyaddrreq-trust
:END:
Return the address of the request, using the given =trust= parameter.

The =trust= argument is a function that returns =true= if you trust the
address, =false= if you don't. The closest untrusted address is
returned.

#+begin_src js
proxyaddr(req, function (addr) { return addr === '127.0.0.1' })
proxyaddr(req, function (addr, i) { return i < 1 })
#+end_src

The =trust= arugment may also be a single IP address string or an array
of trusted addresses, as plain IP addresses, CIDR-formatted strings, or
IP/netmask strings.

#+begin_src js
proxyaddr(req, '127.0.0.1')
proxyaddr(req, ['127.0.0.0/8', '10.0.0.0/8'])
proxyaddr(req, ['127.0.0.0/255.0.0.0', '192.168.0.0/255.255.0.0'])
#+end_src

This module also supports IPv6. Your IPv6 addresses will be normalized
automatically (i.e. =fe80::00ed:1= equals =fe80:0:0:0:0:0:ed:1=).

#+begin_src js
proxyaddr(req, '::1')
proxyaddr(req, ['::1/128', 'fe80::/10'])
#+end_src

This module will automatically work with IPv4-mapped IPv6 addresses as
well to support node.js in IPv6-only mode. This means that you do not
have to specify both =::ffff:a00:1= and =10.0.0.1=.

As a convenience, this module also takes certain pre-defined names in
addition to IP addresses, which expand into IP addresses:

#+begin_src js
proxyaddr(req, 'loopback')
proxyaddr(req, ['loopback', 'fc00:ac:1ab5:fff::1/64'])
#+end_src

- =loopback=: IPv4 and IPv6 loopback addresses (like =::1= and
  =127.0.0.1=).
- =linklocal=: IPv4 and IPv6 link-local addresses (like =fe80::1:1:1:1=
  and =169.254.0.1=).
- =uniquelocal=: IPv4 private addresses and IPv6 unique-local addresses
  (like =fc00:ac:1ab5:fff::1= and =192.168.0.1=).

When =trust= is specified as a function, it will be called for each
address to determine if it is a trusted address. The function is given
two arguments: =addr= and =i=, where =addr= is a string of the address
to check and =i= is a number that represents the distance from the
socket address.

*** proxyaddr.all(req, [trust])
:PROPERTIES:
:CUSTOM_ID: proxyaddr.allreq-trust
:END:
Return all the addresses of the request, optionally stopping at the
first untrusted. This array is ordered from closest to furthest
(i.e. =arr[0] === req.connection.remoteAddress=).

#+begin_src js
proxyaddr.all(req)
#+end_src

The optional =trust= argument takes the same arguments as =trust= does
in =proxyaddr(req, trust)=.

#+begin_src js
proxyaddr.all(req, 'loopback')
#+end_src

*** proxyaddr.compile(val)
:PROPERTIES:
:CUSTOM_ID: proxyaddr.compileval
:END:
Compiles argument =val= into a =trust= function. This function takes the
same arguments as =trust= does in =proxyaddr(req, trust)= and returns a
function suitable for =proxyaddr(req, trust)=.

#+begin_src js
var trust = proxyaddr.compile('loopback')
var addr = proxyaddr(req, trust)
#+end_src

This function is meant to be optimized for use against every request. It
is recommend to compile a trust function up-front for the trusted
configuration and pass that to =proxyaddr(req, trust)= for each request.

** Testing
:PROPERTIES:
:CUSTOM_ID: testing
:END:
#+begin_src sh
$ npm test
#+end_src

** Benchmarks
:PROPERTIES:
:CUSTOM_ID: benchmarks
:END:
#+begin_src sh
$ npm run-script bench
#+end_src

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:
[[file:LICENSE][MIT]]
