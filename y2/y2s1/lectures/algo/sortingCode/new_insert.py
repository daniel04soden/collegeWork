array = [87234, 98723, 45678, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34567, 90123, 56789, 12345, 67890, 34]


def insertion_sort(arr:list) -> list:
    n = len(array)
    if n <= 1:
        return arr
    else:
        for i in range(1,n):
            key = arr[i]
            j = i-1 
            while (j>=0 and key < arr[j]):
                arr[j+1] = arr[j]
                j-=1
            arr[j+1] = key
        return arr
                
sorted_array = insertion_sort(array)
print(sorted_array)

for i in range(1,10):
    print("-"*10)
print(len(array))
for i in range(1,10):
    print("-"*10)

# Shell Sort online

def shell_sort(arr:list) -> list:
    n = len(array) # Find the length of the array
    gap = int(n/2) # Divide the array length in half 
    if n <= 1: # if empty or only one element essentially
        return arr
    while gap> 0: # While the halfed array is greater than 0
        for i in range(gap,n):
            temp = arr[i]
            j = i 
            while (j>=gap and arr[j-gap] >temp):
                arr[j] = arr[j-gap]
                j-=gap
            arr[j] = temp
        gap/=2 
        return arr
                
sorted_array2 = shell_sort(array)
print(sorted_array)

print(sorted_array == sorted_array2)


running = true
while (running == true):
    array_input = int(input("Enter an integer to add to the array"))
    array.append(array_input)
    print(shell_sort(array))
    continue_q = str(input("Enter "))
    # comment: 
# end while