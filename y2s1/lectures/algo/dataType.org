#+title: Abstract Data Types

* Abstract Data types

** Data Abstraction

*** User vs developer view.

- It is often not necessary to know how exactly libraries are implemented and how data is managed internally
- While developing libraries, it is desireable to not depend on any client code to be able to adapt to implementation
  and internal data management without affecting any end-users.

- These two concerns are covered by APIs (Application programming interfaces), which act as a contract between the code
  and the library
- Both the client ocde as well as the library only interact through the API in this apporach, never directly with each other.

*** Specification vs Implentation

- From a users POV the API is a specification which functions are available to interact with the data
- The specific implentation are kept completely transparent to the user

- Implentations have different properties due to
  - Runtime
  - Memory effeciency
  - Cost
- An understanding of the underlying implmentation is helpful, even if not implementing any library functions directly

*** Abstract vs Data structure

- An ADT (Abstract data structure) describes what operations the data supports and how it can be used
- A data structure is how the data is organised, managed and stored in actual implementation.


- It is possible to use an abstract datatype without any knowledge on how it is implemented such as a sorting algo.

** Stacks
- A stack is a collection of items where only the top most item can be accessed
- x = PEEK(S) - View top element on the stack
- PUSH(Sy) - New irems put on top of the stack
- z = POP(S) - Take off the top item

  - Policy of last in first out (LIFO)

*** Array implementation of a stack
- To implement a stack on a RAM, a suitable data structure must be devised A possible implementation uses a pre-allocated
  array S[i..n] to hold all elements in the stack.
- When elements are put onto the stack, the top element indicator is increased.
- If the capacity of a stack is exceeded, a stack overflow occurs
- When elements are removed from the stack, the top element indicator is decreased.
  - if the stack is empty, a stack underflow occurs.

** Queues

- A queue q is a collection of items implementing the opposite (First in first out policy)

  - New items always added to the back of the queue
  - ENQUEU(Q,x)
  - And removed from the front of the queue
    - QUEUE(Q,y)

- Q=Create-QUEUE
- x = NEXT(Q) - Returns the next element in line without removing it from the queue
- b = QUEUE-EMPTY(Q) - Determines if the queue is empty or not

*** Array implentation of a queue

- Queues can be implemented using a pre allocated array Q[1..n]
- In addition we need:
  - A reference head pointing to the element at the front of the queue
  - A reference tail[Q] pointing to the back of the queue where new elements are added.

- The queue is assumed to wrap around if tail[Q] < head[Q]

  - New elements are added at the tail and the tail-counter is increased, wrapping around if needed

    - Queue is empty if tail[Q] == head[Q]

** Array implementation of stacks and queus

- Stacks and queues are abstract data types that hold a dynamic set of elements
- The array implementation must pre-allocate a static number of cells in advance
 - Therefore the amount of memory required doesn't depend on the number of elements currently stored in the data struct, but not on the max capacity.
