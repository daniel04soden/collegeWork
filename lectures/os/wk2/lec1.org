#+title: Lecture 1 - Processes

* Processes

*Operating system* : the layer of software between the applications and the computer hardware

- It managers execution of applications, makes resources avaliable to apps, switches betweeen apps (concurrency)
- Makes efficient use of the processor

*Process*: a program in execution

- A unit of activity characterised by its execution of a sequence of instructions, a current state and associated set of system resources.


*** This consists of: - The process image
- THe executable program code
- Associated data
- Process control block

** OS control structures:

- The os constructs and maintains tables of information about each tentity that it is managing:
- Memory
- files
- processes
- IO table

*** Memory table

- The *memory table* keeps track of where processes are stored in real
  memory and in virtual memory. These tables include the following:

  - The allocation of main memory to processes
  - The allocaiton of virtual memory to processes
  - Protection info about segments of main memory
  - Information for managing virtual memory

*** IO table

- This keeps track of all io devices and channels

  - Which ones are available/allocated
  - status of current io


*** File table

- existence
- location
- permissions

*** Process table

- Organises information about a process
- Its current io activity
- File access

Uses cross references to other tables


- Location of a process depends on memory management scheme in use

- Some process will be stored in ram, some on disk
- Once the os can locate a process, it can access all of its attributes in the
  process's process control block.

- Process table is an array of process control blocks.


**** Process control block
- The attributes of a process are stored with the process in the PCB
- Unique for each process
- 3 Categories of info
- Process identification:
- Unique numeric identifiers for the process, its parent processes and the associated user.

- CPU state Info
- The execution context of the process
- Copies of the current values of the CPU registers for this process must be stored whe the process is not using the CPU such as:

  - Programmer visible registers
  - Control and status registers
  - Stack (address in ram of the process's roughwork area) pointer

- Process control information:
        - State and scheduling
        - Relationships with other processes
        - Inter-process communication
        - Process Privileges
        - Memory management eg page table base address
        - Resource ownership and utilization



** Process state transitions

1. *New*: Process newly created
2. *Ready*: Process loaded into main memory and placed in queue of processing which are waiting for cpu allocation
3. RUnning: CPU allocated to process
4. Blocked: Waiting for user IO
5. Blocked/Suspend: when main memory is full, a process in a blocked state is swapped out to secondary memory (virtual)
6. Ready suspend: When main memory is full, a process whcih is in a ready state is swapped out from main memory to secondary memory
7. Terminated: entire set of instructions is executed and the process is completed, pcb deleted.


** Threads

- User level threading: All thread management is done by the application
- Kernel level threading: All thread management is done by the kernel


Multithreads in a single process:

This allows multiple concurrent paths of exectuion to run from within the same process with shared memory and shred access to their process's
resources.

*** Advantages of Threads


- Saves extra ocerhead of having a separate process for each thread
- Threads are faster to switch, create and terminate.
- Inter-thread communication is more efficient than inter-process communication.
- Foreground and background work
- Async processing
- Apeeds up execution
- Organising programs


** Process switching:

1. What event triggers a switch?
2. Whats difference betweeen a process switch and a mode switch?
3. How are switches done?

- When an interrupt occurs, the currently running process must make way for the interrupt handling software to use the cpu and deal witht the interrupt

- Interrupts can occur for many reason and are classified as follows:
  1. External interrupt:

     - Some event happens outside of the current process which must be dealt with
       - Page fault,clock interrupt
  2. Trap
     - Sometimes a process tries to do something illegal
     - When this occurs, interrupt handler takes over and determines the severity of the problem (minor,fatal)
     - If minor some recovery is done or an error is displayed
     - If fatal, offending process is moved to 'exit' state. Means cpu is available to other waiting processes.
  3. System call

     - Current program amy call on the OS to intervene
     - Results in a Process being moved to a blocked state while it awaits service of its call
     - CPU available for other waiting processes
- An interrupt handler is typically a short program which does some adminstrative work.
- When the hanlder is finished, the interrupted porcess's psw and the pc are restored to the CPU and that same
  procesess resumes execution.
- This is a mode switch, the interrupted process regains the CPU

*** How are process switches done.
1. Interrupt occurs, signal sent to CPU
2. CPU hardware completes execution of current instruction of current process
3. CPU hardware checks for interrupt and detects signal
4. CPu hardware sends acknowledgement
5. CPU saves the PSW and the PC.
6. CPU hardware looks up address of the first
instruction of the interrupt handler and loads this as
the new PC value. This means the next instruction
run will be that of the interrupt handler routine.
1. Interrupt handler software saves context of previous
process (i.e. register values etc. that may be affected)
8. Interrupt handler software processes interrupt
9. Full execution context of interrupted process is saved
in its PCB, its state is updated and it joins some
queue.
10. Scheduler software selects next process for CPU
11. Context of next process restored to CPU (i.e. register
values etc.), process state is updated, and that
processâ€™s ID removed from ready queue. PC value is
set that of the chosen process, so the next instruction
run will be the next instruction of the process chosen
by the scheduler.
